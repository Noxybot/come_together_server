// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: come_together.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_come_5ftogether_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_come_5ftogether_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_come_5ftogether_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_come_5ftogether_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_come_5ftogether_2eproto;
namespace ComeTogether {
class access_token;
class access_tokenDefaultTypeInternal;
extern access_tokenDefaultTypeInternal _access_token_default_instance_;
class add_marker_request;
class add_marker_requestDefaultTypeInternal;
extern add_marker_requestDefaultTypeInternal _add_marker_request_default_instance_;
class add_marker_response;
class add_marker_responseDefaultTypeInternal;
extern add_marker_responseDefaultTypeInternal _add_marker_response_default_instance_;
class ask_token_request;
class ask_token_requestDefaultTypeInternal;
extern ask_token_requestDefaultTypeInternal _ask_token_request_default_instance_;
class chat_message;
class chat_messageDefaultTypeInternal;
extern chat_messageDefaultTypeInternal _chat_message_default_instance_;
class check_request;
class check_requestDefaultTypeInternal;
extern check_requestDefaultTypeInternal _check_request_default_instance_;
class check_response;
class check_responseDefaultTypeInternal;
extern check_responseDefaultTypeInternal _check_response_default_instance_;
class empty;
class emptyDefaultTypeInternal;
extern emptyDefaultTypeInternal _empty_default_instance_;
class event;
class eventDefaultTypeInternal;
extern eventDefaultTypeInternal _event_default_instance_;
class generic_chat_info;
class generic_chat_infoDefaultTypeInternal;
extern generic_chat_infoDefaultTypeInternal _generic_chat_info_default_instance_;
class get_chat_messages_request;
class get_chat_messages_requestDefaultTypeInternal;
extern get_chat_messages_requestDefaultTypeInternal _get_chat_messages_request_default_instance_;
class get_images_request;
class get_images_requestDefaultTypeInternal;
extern get_images_requestDefaultTypeInternal _get_images_request_default_instance_;
class get_info_request;
class get_info_requestDefaultTypeInternal;
extern get_info_requestDefaultTypeInternal _get_info_request_default_instance_;
class get_info_response;
class get_info_responseDefaultTypeInternal;
extern get_info_responseDefaultTypeInternal _get_info_response_default_instance_;
class image;
class imageDefaultTypeInternal;
extern imageDefaultTypeInternal _image_default_instance_;
class login_request;
class login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class login_response;
class login_responseDefaultTypeInternal;
extern login_responseDefaultTypeInternal _login_response_default_instance_;
class manage_image_request;
class manage_image_requestDefaultTypeInternal;
extern manage_image_requestDefaultTypeInternal _manage_image_request_default_instance_;
class manage_image_response;
class manage_image_responseDefaultTypeInternal;
extern manage_image_responseDefaultTypeInternal _manage_image_response_default_instance_;
class marker_chat_info;
class marker_chat_infoDefaultTypeInternal;
extern marker_chat_infoDefaultTypeInternal _marker_chat_info_default_instance_;
class marker_info;
class marker_infoDefaultTypeInternal;
extern marker_infoDefaultTypeInternal _marker_info_default_instance_;
class register_request;
class register_requestDefaultTypeInternal;
extern register_requestDefaultTypeInternal _register_request_default_instance_;
class register_response;
class register_responseDefaultTypeInternal;
extern register_responseDefaultTypeInternal _register_response_default_instance_;
class send_chat_message_request;
class send_chat_message_requestDefaultTypeInternal;
extern send_chat_message_requestDefaultTypeInternal _send_chat_message_request_default_instance_;
class send_chat_message_response;
class send_chat_message_responseDefaultTypeInternal;
extern send_chat_message_responseDefaultTypeInternal _send_chat_message_response_default_instance_;
class update_info_request;
class update_info_requestDefaultTypeInternal;
extern update_info_requestDefaultTypeInternal _update_info_request_default_instance_;
class update_info_response;
class update_info_responseDefaultTypeInternal;
extern update_info_responseDefaultTypeInternal _update_info_response_default_instance_;
class user_info;
class user_infoDefaultTypeInternal;
extern user_infoDefaultTypeInternal _user_info_default_instance_;
class verify_token_request;
class verify_token_requestDefaultTypeInternal;
extern verify_token_requestDefaultTypeInternal _verify_token_request_default_instance_;
class verify_token_response;
class verify_token_responseDefaultTypeInternal;
extern verify_token_responseDefaultTypeInternal _verify_token_response_default_instance_;
}  // namespace ComeTogether
PROTOBUF_NAMESPACE_OPEN
template<> ::ComeTogether::access_token* Arena::CreateMaybeMessage<::ComeTogether::access_token>(Arena*);
template<> ::ComeTogether::add_marker_request* Arena::CreateMaybeMessage<::ComeTogether::add_marker_request>(Arena*);
template<> ::ComeTogether::add_marker_response* Arena::CreateMaybeMessage<::ComeTogether::add_marker_response>(Arena*);
template<> ::ComeTogether::ask_token_request* Arena::CreateMaybeMessage<::ComeTogether::ask_token_request>(Arena*);
template<> ::ComeTogether::chat_message* Arena::CreateMaybeMessage<::ComeTogether::chat_message>(Arena*);
template<> ::ComeTogether::check_request* Arena::CreateMaybeMessage<::ComeTogether::check_request>(Arena*);
template<> ::ComeTogether::check_response* Arena::CreateMaybeMessage<::ComeTogether::check_response>(Arena*);
template<> ::ComeTogether::empty* Arena::CreateMaybeMessage<::ComeTogether::empty>(Arena*);
template<> ::ComeTogether::event* Arena::CreateMaybeMessage<::ComeTogether::event>(Arena*);
template<> ::ComeTogether::generic_chat_info* Arena::CreateMaybeMessage<::ComeTogether::generic_chat_info>(Arena*);
template<> ::ComeTogether::get_chat_messages_request* Arena::CreateMaybeMessage<::ComeTogether::get_chat_messages_request>(Arena*);
template<> ::ComeTogether::get_images_request* Arena::CreateMaybeMessage<::ComeTogether::get_images_request>(Arena*);
template<> ::ComeTogether::get_info_request* Arena::CreateMaybeMessage<::ComeTogether::get_info_request>(Arena*);
template<> ::ComeTogether::get_info_response* Arena::CreateMaybeMessage<::ComeTogether::get_info_response>(Arena*);
template<> ::ComeTogether::image* Arena::CreateMaybeMessage<::ComeTogether::image>(Arena*);
template<> ::ComeTogether::login_request* Arena::CreateMaybeMessage<::ComeTogether::login_request>(Arena*);
template<> ::ComeTogether::login_response* Arena::CreateMaybeMessage<::ComeTogether::login_response>(Arena*);
template<> ::ComeTogether::manage_image_request* Arena::CreateMaybeMessage<::ComeTogether::manage_image_request>(Arena*);
template<> ::ComeTogether::manage_image_response* Arena::CreateMaybeMessage<::ComeTogether::manage_image_response>(Arena*);
template<> ::ComeTogether::marker_chat_info* Arena::CreateMaybeMessage<::ComeTogether::marker_chat_info>(Arena*);
template<> ::ComeTogether::marker_info* Arena::CreateMaybeMessage<::ComeTogether::marker_info>(Arena*);
template<> ::ComeTogether::register_request* Arena::CreateMaybeMessage<::ComeTogether::register_request>(Arena*);
template<> ::ComeTogether::register_response* Arena::CreateMaybeMessage<::ComeTogether::register_response>(Arena*);
template<> ::ComeTogether::send_chat_message_request* Arena::CreateMaybeMessage<::ComeTogether::send_chat_message_request>(Arena*);
template<> ::ComeTogether::send_chat_message_response* Arena::CreateMaybeMessage<::ComeTogether::send_chat_message_response>(Arena*);
template<> ::ComeTogether::update_info_request* Arena::CreateMaybeMessage<::ComeTogether::update_info_request>(Arena*);
template<> ::ComeTogether::update_info_response* Arena::CreateMaybeMessage<::ComeTogether::update_info_response>(Arena*);
template<> ::ComeTogether::user_info* Arena::CreateMaybeMessage<::ComeTogether::user_info>(Arena*);
template<> ::ComeTogether::verify_token_request* Arena::CreateMaybeMessage<::ComeTogether::verify_token_request>(Arena*);
template<> ::ComeTogether::verify_token_response* Arena::CreateMaybeMessage<::ComeTogether::verify_token_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ComeTogether {

enum verify_token_response_result : int {
  verify_token_response_result_OK = 0,
  verify_token_response_result_EMAIL_NOT_FOUND = 1,
  verify_token_response_result_WRONG_TOKEN = 2,
  verify_token_response_result_OTHER = 999,
  verify_token_response_result_verify_token_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  verify_token_response_result_verify_token_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool verify_token_response_result_IsValid(int value);
constexpr verify_token_response_result verify_token_response_result_result_MIN = verify_token_response_result_OK;
constexpr verify_token_response_result verify_token_response_result_result_MAX = verify_token_response_result_OTHER;
constexpr int verify_token_response_result_result_ARRAYSIZE = verify_token_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* verify_token_response_result_descriptor();
template<typename T>
inline const std::string& verify_token_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, verify_token_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function verify_token_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    verify_token_response_result_descriptor(), enum_t_value);
}
inline bool verify_token_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, verify_token_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<verify_token_response_result>(
    verify_token_response_result_descriptor(), name, value);
}
enum update_info_request_update_type : int {
  update_info_request_update_type_MARKER = 0,
  update_info_request_update_type_USER = 1,
  update_info_request_update_type_update_info_request_update_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  update_info_request_update_type_update_info_request_update_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool update_info_request_update_type_IsValid(int value);
constexpr update_info_request_update_type update_info_request_update_type_update_type_MIN = update_info_request_update_type_MARKER;
constexpr update_info_request_update_type update_info_request_update_type_update_type_MAX = update_info_request_update_type_USER;
constexpr int update_info_request_update_type_update_type_ARRAYSIZE = update_info_request_update_type_update_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* update_info_request_update_type_descriptor();
template<typename T>
inline const std::string& update_info_request_update_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, update_info_request_update_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function update_info_request_update_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    update_info_request_update_type_descriptor(), enum_t_value);
}
inline bool update_info_request_update_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, update_info_request_update_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<update_info_request_update_type>(
    update_info_request_update_type_descriptor(), name, value);
}
enum update_info_response_result : int {
  update_info_response_result_OK = 0,
  update_info_response_result_INSUFFICIENT_PERMISIONS = 1,
  update_info_response_result_OTHER = 999,
  update_info_response_result_update_info_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  update_info_response_result_update_info_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool update_info_response_result_IsValid(int value);
constexpr update_info_response_result update_info_response_result_result_MIN = update_info_response_result_OK;
constexpr update_info_response_result update_info_response_result_result_MAX = update_info_response_result_OTHER;
constexpr int update_info_response_result_result_ARRAYSIZE = update_info_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* update_info_response_result_descriptor();
template<typename T>
inline const std::string& update_info_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, update_info_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function update_info_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    update_info_response_result_descriptor(), enum_t_value);
}
inline bool update_info_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, update_info_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<update_info_response_result>(
    update_info_response_result_descriptor(), name, value);
}
enum event_event_type : int {
  event_event_type_MARKER_ADDED = 0,
  event_event_type_MARKER_EDITED = 2,
  event_event_type_MARKER_DELETED_BY_USER = 3,
  event_event_type_MARKER_DELETED_BY_TIMEOUT = 4,
  event_event_type_MESSAGE_ADDED = 5,
  event_event_type_MESSAGE_EDITED = 6,
  event_event_type_MESSAGE_DELETED = 7,
  event_event_type_USER_UPDATED = 8,
  event_event_type_event_event_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  event_event_type_event_event_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool event_event_type_IsValid(int value);
constexpr event_event_type event_event_type_event_type_MIN = event_event_type_MARKER_ADDED;
constexpr event_event_type event_event_type_event_type_MAX = event_event_type_USER_UPDATED;
constexpr int event_event_type_event_type_ARRAYSIZE = event_event_type_event_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* event_event_type_descriptor();
template<typename T>
inline const std::string& event_event_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, event_event_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function event_event_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    event_event_type_descriptor(), enum_t_value);
}
inline bool event_event_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, event_event_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<event_event_type>(
    event_event_type_descriptor(), name, value);
}
enum chat_message_message_type : int {
  chat_message_message_type_TEXT = 0,
  chat_message_message_type_chat_message_message_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  chat_message_message_type_chat_message_message_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool chat_message_message_type_IsValid(int value);
constexpr chat_message_message_type chat_message_message_type_message_type_MIN = chat_message_message_type_TEXT;
constexpr chat_message_message_type chat_message_message_type_message_type_MAX = chat_message_message_type_TEXT;
constexpr int chat_message_message_type_message_type_ARRAYSIZE = chat_message_message_type_message_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* chat_message_message_type_descriptor();
template<typename T>
inline const std::string& chat_message_message_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, chat_message_message_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function chat_message_message_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    chat_message_message_type_descriptor(), enum_t_value);
}
inline bool chat_message_message_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, chat_message_message_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<chat_message_message_type>(
    chat_message_message_type_descriptor(), name, value);
}
enum send_chat_message_response_result : int {
  send_chat_message_response_result_OK = 0,
  send_chat_message_response_result_CHAT_DOES_NOT_EXIST = 1,
  send_chat_message_response_result_INSUFFICIENT_PERMISIONS = 2,
  send_chat_message_response_result_OTHER = 999,
  send_chat_message_response_result_send_chat_message_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  send_chat_message_response_result_send_chat_message_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool send_chat_message_response_result_IsValid(int value);
constexpr send_chat_message_response_result send_chat_message_response_result_result_MIN = send_chat_message_response_result_OK;
constexpr send_chat_message_response_result send_chat_message_response_result_result_MAX = send_chat_message_response_result_OTHER;
constexpr int send_chat_message_response_result_result_ARRAYSIZE = send_chat_message_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* send_chat_message_response_result_descriptor();
template<typename T>
inline const std::string& send_chat_message_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, send_chat_message_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function send_chat_message_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    send_chat_message_response_result_descriptor(), enum_t_value);
}
inline bool send_chat_message_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, send_chat_message_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<send_chat_message_response_result>(
    send_chat_message_response_result_descriptor(), name, value);
}
enum get_info_request_info_type : int {
  get_info_request_info_type_USER = 0,
  get_info_request_info_type_MARKER = 1,
  get_info_request_info_type_MARKER_CHAT = 2,
  get_info_request_info_type_get_info_request_info_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  get_info_request_info_type_get_info_request_info_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool get_info_request_info_type_IsValid(int value);
constexpr get_info_request_info_type get_info_request_info_type_info_type_MIN = get_info_request_info_type_USER;
constexpr get_info_request_info_type get_info_request_info_type_info_type_MAX = get_info_request_info_type_MARKER_CHAT;
constexpr int get_info_request_info_type_info_type_ARRAYSIZE = get_info_request_info_type_info_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* get_info_request_info_type_descriptor();
template<typename T>
inline const std::string& get_info_request_info_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, get_info_request_info_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function get_info_request_info_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    get_info_request_info_type_descriptor(), enum_t_value);
}
inline bool get_info_request_info_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, get_info_request_info_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<get_info_request_info_type>(
    get_info_request_info_type_descriptor(), name, value);
}
enum get_images_request_image_type : int {
  get_images_request_image_type_USER = 0,
  get_images_request_image_type_MARKER = 1,
  get_images_request_image_type_get_images_request_image_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  get_images_request_image_type_get_images_request_image_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool get_images_request_image_type_IsValid(int value);
constexpr get_images_request_image_type get_images_request_image_type_image_type_MIN = get_images_request_image_type_USER;
constexpr get_images_request_image_type get_images_request_image_type_image_type_MAX = get_images_request_image_type_MARKER;
constexpr int get_images_request_image_type_image_type_ARRAYSIZE = get_images_request_image_type_image_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* get_images_request_image_type_descriptor();
template<typename T>
inline const std::string& get_images_request_image_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, get_images_request_image_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function get_images_request_image_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    get_images_request_image_type_descriptor(), enum_t_value);
}
inline bool get_images_request_image_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, get_images_request_image_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<get_images_request_image_type>(
    get_images_request_image_type_descriptor(), name, value);
}
enum manage_image_request_action : int {
  manage_image_request_action_UPLOAD_USER_IMAGE = 0,
  manage_image_request_action_DELETE_USER_IMAGE = 1,
  manage_image_request_action_UPLOAD_MARKER_IMAGE = 2,
  manage_image_request_action_DELETE_MARKER_IMAGE = 3,
  manage_image_request_action_manage_image_request_action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  manage_image_request_action_manage_image_request_action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool manage_image_request_action_IsValid(int value);
constexpr manage_image_request_action manage_image_request_action_action_MIN = manage_image_request_action_UPLOAD_USER_IMAGE;
constexpr manage_image_request_action manage_image_request_action_action_MAX = manage_image_request_action_DELETE_MARKER_IMAGE;
constexpr int manage_image_request_action_action_ARRAYSIZE = manage_image_request_action_action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* manage_image_request_action_descriptor();
template<typename T>
inline const std::string& manage_image_request_action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, manage_image_request_action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function manage_image_request_action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    manage_image_request_action_descriptor(), enum_t_value);
}
inline bool manage_image_request_action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, manage_image_request_action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<manage_image_request_action>(
    manage_image_request_action_descriptor(), name, value);
}
enum manage_image_response_result : int {
  manage_image_response_result_OK = 0,
  manage_image_response_result_INSUFFICIENT_PERMISIONS = 1,
  manage_image_response_result_OTHER = 999,
  manage_image_response_result_manage_image_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  manage_image_response_result_manage_image_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool manage_image_response_result_IsValid(int value);
constexpr manage_image_response_result manage_image_response_result_result_MIN = manage_image_response_result_OK;
constexpr manage_image_response_result manage_image_response_result_result_MAX = manage_image_response_result_OTHER;
constexpr int manage_image_response_result_result_ARRAYSIZE = manage_image_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* manage_image_response_result_descriptor();
template<typename T>
inline const std::string& manage_image_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, manage_image_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function manage_image_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    manage_image_response_result_descriptor(), enum_t_value);
}
inline bool manage_image_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, manage_image_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<manage_image_response_result>(
    manage_image_response_result_descriptor(), name, value);
}
enum check_request_type : int {
  check_request_type_EMAIL = 0,
  check_request_type_LOGIN = 1,
  check_request_type_check_request_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  check_request_type_check_request_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool check_request_type_IsValid(int value);
constexpr check_request_type check_request_type_type_MIN = check_request_type_EMAIL;
constexpr check_request_type check_request_type_type_MAX = check_request_type_LOGIN;
constexpr int check_request_type_type_ARRAYSIZE = check_request_type_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* check_request_type_descriptor();
template<typename T>
inline const std::string& check_request_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, check_request_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function check_request_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    check_request_type_descriptor(), enum_t_value);
}
inline bool check_request_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, check_request_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<check_request_type>(
    check_request_type_descriptor(), name, value);
}
enum check_response_result : int {
  check_response_result_AVAILABLE = 0,
  check_response_result_TAKEN = 1,
  check_response_result_check_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  check_response_result_check_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool check_response_result_IsValid(int value);
constexpr check_response_result check_response_result_result_MIN = check_response_result_AVAILABLE;
constexpr check_response_result check_response_result_result_MAX = check_response_result_TAKEN;
constexpr int check_response_result_result_ARRAYSIZE = check_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* check_response_result_descriptor();
template<typename T>
inline const std::string& check_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, check_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function check_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    check_response_result_descriptor(), enum_t_value);
}
inline bool check_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, check_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<check_response_result>(
    check_response_result_descriptor(), name, value);
}
enum login_response_result : int {
  login_response_result_OK = 0,
  login_response_result_USER_NOT_FOUND = 1,
  login_response_result_WRONG_PASSWORD = 2,
  login_response_result_OTHER = 999,
  login_response_result_login_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  login_response_result_login_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool login_response_result_IsValid(int value);
constexpr login_response_result login_response_result_result_MIN = login_response_result_OK;
constexpr login_response_result login_response_result_result_MAX = login_response_result_OTHER;
constexpr int login_response_result_result_ARRAYSIZE = login_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* login_response_result_descriptor();
template<typename T>
inline const std::string& login_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, login_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function login_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    login_response_result_descriptor(), enum_t_value);
}
inline bool login_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, login_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<login_response_result>(
    login_response_result_descriptor(), name, value);
}
enum register_response_result : int {
  register_response_result_OK = 0,
  register_response_result_EMAIL_ALREADY_TAKEN = 1,
  register_response_result_LOGIN_ALREADY_TAKEN = 2,
  register_response_result_OTHER = 999,
  register_response_result_register_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  register_response_result_register_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool register_response_result_IsValid(int value);
constexpr register_response_result register_response_result_result_MIN = register_response_result_OK;
constexpr register_response_result register_response_result_result_MAX = register_response_result_OTHER;
constexpr int register_response_result_result_ARRAYSIZE = register_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* register_response_result_descriptor();
template<typename T>
inline const std::string& register_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, register_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function register_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    register_response_result_descriptor(), enum_t_value);
}
inline bool register_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, register_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<register_response_result>(
    register_response_result_descriptor(), name, value);
}
enum marker_info_category : int {
  marker_info_category_CYCLING = 0,
  marker_info_category_FOOTBALL = 1,
  marker_info_category_BASKETBALL = 2,
  marker_info_category_RUNNING = 3,
  marker_info_category_GYM = 4,
  marker_info_category_GALLERY = 5,
  marker_info_category_EXCURSION = 6,
  marker_info_category_THEATER = 7,
  marker_info_category_CINEMA = 8,
  marker_info_category_BAR = 9,
  marker_info_category_RESTAURANT = 10,
  marker_info_category_NIGTH_CLUB = 11,
  marker_info_category_HOOKAH = 12,
  marker_info_category_CAFE = 13,
  marker_info_category_WALK = 14,
  marker_info_category_CONCERT = 15,
  marker_info_category_QUEST = 16,
  marker_info_category_ZOO = 17,
  marker_info_category_marker_info_category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  marker_info_category_marker_info_category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool marker_info_category_IsValid(int value);
constexpr marker_info_category marker_info_category_category_MIN = marker_info_category_CYCLING;
constexpr marker_info_category marker_info_category_category_MAX = marker_info_category_ZOO;
constexpr int marker_info_category_category_ARRAYSIZE = marker_info_category_category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* marker_info_category_descriptor();
template<typename T>
inline const std::string& marker_info_category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, marker_info_category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function marker_info_category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    marker_info_category_descriptor(), enum_t_value);
}
inline bool marker_info_category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, marker_info_category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<marker_info_category>(
    marker_info_category_descriptor(), name, value);
}
enum add_marker_response_result : int {
  add_marker_response_result_OK = 0,
  add_marker_response_result_TIME_INTERVAL_TOO_SMALL = 1,
  add_marker_response_result_CREATION_TIME_OUTDATED = 2,
  add_marker_response_result_OTHER = 999,
  add_marker_response_result_add_marker_response_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  add_marker_response_result_add_marker_response_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool add_marker_response_result_IsValid(int value);
constexpr add_marker_response_result add_marker_response_result_result_MIN = add_marker_response_result_OK;
constexpr add_marker_response_result add_marker_response_result_result_MAX = add_marker_response_result_OTHER;
constexpr int add_marker_response_result_result_ARRAYSIZE = add_marker_response_result_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* add_marker_response_result_descriptor();
template<typename T>
inline const std::string& add_marker_response_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, add_marker_response_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function add_marker_response_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    add_marker_response_result_descriptor(), enum_t_value);
}
inline bool add_marker_response_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, add_marker_response_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<add_marker_response_result>(
    add_marker_response_result_descriptor(), name, value);
}
// ===================================================================

class image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.image) */ {
 public:
  inline image() : image(nullptr) {}
  virtual ~image();

  image(const image& from);
  image(image&& from) noexcept
    : image() {
    *this = ::std::move(from);
  }

  inline image& operator=(const image& from) {
    CopyFrom(from);
    return *this;
  }
  inline image& operator=(image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const image* internal_default_instance() {
    return reinterpret_cast<const image*>(
               &_image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(image& a, image& b) {
    a.Swap(&b);
  }
  inline void Swap(image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline image* New() const final {
    return CreateMaybeMessage<image>(nullptr);
  }

  image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const image& from);
  void MergeFrom(const image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.image";
  }
  protected:
  explicit image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kUuidFieldNumber = 2,
    kSequenceNumberFieldNumber = 3,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class access_token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.access_token) */ {
 public:
  inline access_token() : access_token(nullptr) {}
  virtual ~access_token();

  access_token(const access_token& from);
  access_token(access_token&& from) noexcept
    : access_token() {
    *this = ::std::move(from);
  }

  inline access_token& operator=(const access_token& from) {
    CopyFrom(from);
    return *this;
  }
  inline access_token& operator=(access_token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const access_token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const access_token* internal_default_instance() {
    return reinterpret_cast<const access_token*>(
               &_access_token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(access_token& a, access_token& b) {
    a.Swap(&b);
  }
  inline void Swap(access_token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(access_token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline access_token* New() const final {
    return CreateMaybeMessage<access_token>(nullptr);
  }

  access_token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<access_token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const access_token& from);
  void MergeFrom(const access_token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(access_token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.access_token";
  }
  protected:
  explicit access_token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.access_token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.empty) */ {
 public:
  inline empty() : empty(nullptr) {}
  virtual ~empty();

  empty(const empty& from);
  empty(empty&& from) noexcept
    : empty() {
    *this = ::std::move(from);
  }

  inline empty& operator=(const empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline empty& operator=(empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const empty* internal_default_instance() {
    return reinterpret_cast<const empty*>(
               &_empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(empty& a, empty& b) {
    a.Swap(&b);
  }
  inline void Swap(empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline empty* New() const final {
    return CreateMaybeMessage<empty>(nullptr);
  }

  empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const empty& from);
  void MergeFrom(const empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.empty";
  }
  protected:
  explicit empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ComeTogether.empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class ask_token_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.ask_token_request) */ {
 public:
  inline ask_token_request() : ask_token_request(nullptr) {}
  virtual ~ask_token_request();

  ask_token_request(const ask_token_request& from);
  ask_token_request(ask_token_request&& from) noexcept
    : ask_token_request() {
    *this = ::std::move(from);
  }

  inline ask_token_request& operator=(const ask_token_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ask_token_request& operator=(ask_token_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ask_token_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ask_token_request* internal_default_instance() {
    return reinterpret_cast<const ask_token_request*>(
               &_ask_token_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ask_token_request& a, ask_token_request& b) {
    a.Swap(&b);
  }
  inline void Swap(ask_token_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ask_token_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ask_token_request* New() const final {
    return CreateMaybeMessage<ask_token_request>(nullptr);
  }

  ask_token_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ask_token_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ask_token_request& from);
  void MergeFrom(const ask_token_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ask_token_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.ask_token_request";
  }
  protected:
  explicit ask_token_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.ask_token_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class verify_token_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.verify_token_request) */ {
 public:
  inline verify_token_request() : verify_token_request(nullptr) {}
  virtual ~verify_token_request();

  verify_token_request(const verify_token_request& from);
  verify_token_request(verify_token_request&& from) noexcept
    : verify_token_request() {
    *this = ::std::move(from);
  }

  inline verify_token_request& operator=(const verify_token_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline verify_token_request& operator=(verify_token_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const verify_token_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const verify_token_request* internal_default_instance() {
    return reinterpret_cast<const verify_token_request*>(
               &_verify_token_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(verify_token_request& a, verify_token_request& b) {
    a.Swap(&b);
  }
  inline void Swap(verify_token_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verify_token_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline verify_token_request* New() const final {
    return CreateMaybeMessage<verify_token_request>(nullptr);
  }

  verify_token_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<verify_token_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const verify_token_request& from);
  void MergeFrom(const verify_token_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verify_token_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.verify_token_request";
  }
  protected:
  explicit verify_token_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.verify_token_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class verify_token_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.verify_token_response) */ {
 public:
  inline verify_token_response() : verify_token_response(nullptr) {}
  virtual ~verify_token_response();

  verify_token_response(const verify_token_response& from);
  verify_token_response(verify_token_response&& from) noexcept
    : verify_token_response() {
    *this = ::std::move(from);
  }

  inline verify_token_response& operator=(const verify_token_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline verify_token_response& operator=(verify_token_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const verify_token_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const verify_token_response* internal_default_instance() {
    return reinterpret_cast<const verify_token_response*>(
               &_verify_token_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(verify_token_response& a, verify_token_response& b) {
    a.Swap(&b);
  }
  inline void Swap(verify_token_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verify_token_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline verify_token_response* New() const final {
    return CreateMaybeMessage<verify_token_response>(nullptr);
  }

  verify_token_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<verify_token_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const verify_token_response& from);
  void MergeFrom(const verify_token_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verify_token_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.verify_token_response";
  }
  protected:
  explicit verify_token_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef verify_token_response_result result;
  static constexpr result OK =
    verify_token_response_result_OK;
  static constexpr result EMAIL_NOT_FOUND =
    verify_token_response_result_EMAIL_NOT_FOUND;
  static constexpr result WRONG_TOKEN =
    verify_token_response_result_WRONG_TOKEN;
  static constexpr result OTHER =
    verify_token_response_result_OTHER;
  static inline bool result_IsValid(int value) {
    return verify_token_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    verify_token_response_result_result_MIN;
  static constexpr result result_MAX =
    verify_token_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    verify_token_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return verify_token_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return verify_token_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return verify_token_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // .ComeTogether.verify_token_response.result res = 1;
  void clear_res();
  ::ComeTogether::verify_token_response_result res() const;
  void set_res(::ComeTogether::verify_token_response_result value);
  private:
  ::ComeTogether::verify_token_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::verify_token_response_result value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.verify_token_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class update_info_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.update_info_request) */ {
 public:
  inline update_info_request() : update_info_request(nullptr) {}
  virtual ~update_info_request();

  update_info_request(const update_info_request& from);
  update_info_request(update_info_request&& from) noexcept
    : update_info_request() {
    *this = ::std::move(from);
  }

  inline update_info_request& operator=(const update_info_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline update_info_request& operator=(update_info_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const update_info_request& default_instance();

  enum DataCase {
    kMInfo = 3,
    kUInfo = 4,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const update_info_request* internal_default_instance() {
    return reinterpret_cast<const update_info_request*>(
               &_update_info_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(update_info_request& a, update_info_request& b) {
    a.Swap(&b);
  }
  inline void Swap(update_info_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(update_info_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline update_info_request* New() const final {
    return CreateMaybeMessage<update_info_request>(nullptr);
  }

  update_info_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<update_info_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const update_info_request& from);
  void MergeFrom(const update_info_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_info_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.update_info_request";
  }
  protected:
  explicit update_info_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef update_info_request_update_type update_type;
  static constexpr update_type MARKER =
    update_info_request_update_type_MARKER;
  static constexpr update_type USER =
    update_info_request_update_type_USER;
  static inline bool update_type_IsValid(int value) {
    return update_info_request_update_type_IsValid(value);
  }
  static constexpr update_type update_type_MIN =
    update_info_request_update_type_update_type_MIN;
  static constexpr update_type update_type_MAX =
    update_info_request_update_type_update_type_MAX;
  static constexpr int update_type_ARRAYSIZE =
    update_info_request_update_type_update_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  update_type_descriptor() {
    return update_info_request_update_type_descriptor();
  }
  template<typename T>
  static inline const std::string& update_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, update_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function update_type_Name.");
    return update_info_request_update_type_Name(enum_t_value);
  }
  static inline bool update_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      update_type* value) {
    return update_info_request_update_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMInfoFieldNumber = 3,
    kUInfoFieldNumber = 4,
  };
  // string access_token = 1;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .ComeTogether.update_info_request.update_type type = 2;
  void clear_type();
  ::ComeTogether::update_info_request_update_type type() const;
  void set_type(::ComeTogether::update_info_request_update_type value);
  private:
  ::ComeTogether::update_info_request_update_type _internal_type() const;
  void _internal_set_type(::ComeTogether::update_info_request_update_type value);
  public:

  // .ComeTogether.marker_info m_info = 3;
  bool has_m_info() const;
  private:
  bool _internal_has_m_info() const;
  public:
  void clear_m_info();
  const ::ComeTogether::marker_info& m_info() const;
  ::ComeTogether::marker_info* release_m_info();
  ::ComeTogether::marker_info* mutable_m_info();
  void set_allocated_m_info(::ComeTogether::marker_info* m_info);
  private:
  const ::ComeTogether::marker_info& _internal_m_info() const;
  ::ComeTogether::marker_info* _internal_mutable_m_info();
  public:
  void unsafe_arena_set_allocated_m_info(
      ::ComeTogether::marker_info* m_info);
  ::ComeTogether::marker_info* unsafe_arena_release_m_info();

  // .ComeTogether.user_info u_info = 4;
  bool has_u_info() const;
  private:
  bool _internal_has_u_info() const;
  public:
  void clear_u_info();
  const ::ComeTogether::user_info& u_info() const;
  ::ComeTogether::user_info* release_u_info();
  ::ComeTogether::user_info* mutable_u_info();
  void set_allocated_u_info(::ComeTogether::user_info* u_info);
  private:
  const ::ComeTogether::user_info& _internal_u_info() const;
  ::ComeTogether::user_info* _internal_mutable_u_info();
  public:
  void unsafe_arena_set_allocated_u_info(
      ::ComeTogether::user_info* u_info);
  ::ComeTogether::user_info* unsafe_arena_release_u_info();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ComeTogether.update_info_request)
 private:
  class _Internal;
  void set_has_m_info();
  void set_has_u_info();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  int type_;
  union DataUnion {
    DataUnion() {}
    ::ComeTogether::marker_info* m_info_;
    ::ComeTogether::user_info* u_info_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class update_info_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.update_info_response) */ {
 public:
  inline update_info_response() : update_info_response(nullptr) {}
  virtual ~update_info_response();

  update_info_response(const update_info_response& from);
  update_info_response(update_info_response&& from) noexcept
    : update_info_response() {
    *this = ::std::move(from);
  }

  inline update_info_response& operator=(const update_info_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline update_info_response& operator=(update_info_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const update_info_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const update_info_response* internal_default_instance() {
    return reinterpret_cast<const update_info_response*>(
               &_update_info_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(update_info_response& a, update_info_response& b) {
    a.Swap(&b);
  }
  inline void Swap(update_info_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(update_info_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline update_info_response* New() const final {
    return CreateMaybeMessage<update_info_response>(nullptr);
  }

  update_info_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<update_info_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const update_info_response& from);
  void MergeFrom(const update_info_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_info_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.update_info_response";
  }
  protected:
  explicit update_info_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef update_info_response_result result;
  static constexpr result OK =
    update_info_response_result_OK;
  static constexpr result INSUFFICIENT_PERMISIONS =
    update_info_response_result_INSUFFICIENT_PERMISIONS;
  static constexpr result OTHER =
    update_info_response_result_OTHER;
  static inline bool result_IsValid(int value) {
    return update_info_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    update_info_response_result_result_MIN;
  static constexpr result result_MAX =
    update_info_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    update_info_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return update_info_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return update_info_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return update_info_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // .ComeTogether.update_info_response.result res = 1;
  void clear_res();
  ::ComeTogether::update_info_response_result res() const;
  void set_res(::ComeTogether::update_info_response_result value);
  private:
  ::ComeTogether::update_info_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::update_info_response_result value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.update_info_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.event) */ {
 public:
  inline event() : event(nullptr) {}
  virtual ~event();

  event(const event& from);
  event(event&& from) noexcept
    : event() {
    *this = ::std::move(from);
  }

  inline event& operator=(const event& from) {
    CopyFrom(from);
    return *this;
  }
  inline event& operator=(event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const event& default_instance();

  enum DataCase {
    kMInfo = 2,
    kCMessage = 3,
    kUInfo = 4,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const event* internal_default_instance() {
    return reinterpret_cast<const event*>(
               &_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(event& a, event& b) {
    a.Swap(&b);
  }
  inline void Swap(event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline event* New() const final {
    return CreateMaybeMessage<event>(nullptr);
  }

  event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const event& from);
  void MergeFrom(const event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.event";
  }
  protected:
  explicit event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef event_event_type event_type;
  static constexpr event_type MARKER_ADDED =
    event_event_type_MARKER_ADDED;
  static constexpr event_type MARKER_EDITED =
    event_event_type_MARKER_EDITED;
  static constexpr event_type MARKER_DELETED_BY_USER =
    event_event_type_MARKER_DELETED_BY_USER;
  static constexpr event_type MARKER_DELETED_BY_TIMEOUT =
    event_event_type_MARKER_DELETED_BY_TIMEOUT;
  static constexpr event_type MESSAGE_ADDED =
    event_event_type_MESSAGE_ADDED;
  static constexpr event_type MESSAGE_EDITED =
    event_event_type_MESSAGE_EDITED;
  static constexpr event_type MESSAGE_DELETED =
    event_event_type_MESSAGE_DELETED;
  static constexpr event_type USER_UPDATED =
    event_event_type_USER_UPDATED;
  static inline bool event_type_IsValid(int value) {
    return event_event_type_IsValid(value);
  }
  static constexpr event_type event_type_MIN =
    event_event_type_event_type_MIN;
  static constexpr event_type event_type_MAX =
    event_event_type_event_type_MAX;
  static constexpr int event_type_ARRAYSIZE =
    event_event_type_event_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  event_type_descriptor() {
    return event_event_type_descriptor();
  }
  template<typename T>
  static inline const std::string& event_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, event_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function event_type_Name.");
    return event_event_type_Name(enum_t_value);
  }
  static inline bool event_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      event_type* value) {
    return event_event_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMInfoFieldNumber = 2,
    kCMessageFieldNumber = 3,
    kUInfoFieldNumber = 4,
  };
  // .ComeTogether.event.event_type type = 1;
  void clear_type();
  ::ComeTogether::event_event_type type() const;
  void set_type(::ComeTogether::event_event_type value);
  private:
  ::ComeTogether::event_event_type _internal_type() const;
  void _internal_set_type(::ComeTogether::event_event_type value);
  public:

  // .ComeTogether.marker_info m_info = 2;
  bool has_m_info() const;
  private:
  bool _internal_has_m_info() const;
  public:
  void clear_m_info();
  const ::ComeTogether::marker_info& m_info() const;
  ::ComeTogether::marker_info* release_m_info();
  ::ComeTogether::marker_info* mutable_m_info();
  void set_allocated_m_info(::ComeTogether::marker_info* m_info);
  private:
  const ::ComeTogether::marker_info& _internal_m_info() const;
  ::ComeTogether::marker_info* _internal_mutable_m_info();
  public:
  void unsafe_arena_set_allocated_m_info(
      ::ComeTogether::marker_info* m_info);
  ::ComeTogether::marker_info* unsafe_arena_release_m_info();

  // .ComeTogether.chat_message c_message = 3;
  bool has_c_message() const;
  private:
  bool _internal_has_c_message() const;
  public:
  void clear_c_message();
  const ::ComeTogether::chat_message& c_message() const;
  ::ComeTogether::chat_message* release_c_message();
  ::ComeTogether::chat_message* mutable_c_message();
  void set_allocated_c_message(::ComeTogether::chat_message* c_message);
  private:
  const ::ComeTogether::chat_message& _internal_c_message() const;
  ::ComeTogether::chat_message* _internal_mutable_c_message();
  public:
  void unsafe_arena_set_allocated_c_message(
      ::ComeTogether::chat_message* c_message);
  ::ComeTogether::chat_message* unsafe_arena_release_c_message();

  // .ComeTogether.user_info u_info = 4;
  bool has_u_info() const;
  private:
  bool _internal_has_u_info() const;
  public:
  void clear_u_info();
  const ::ComeTogether::user_info& u_info() const;
  ::ComeTogether::user_info* release_u_info();
  ::ComeTogether::user_info* mutable_u_info();
  void set_allocated_u_info(::ComeTogether::user_info* u_info);
  private:
  const ::ComeTogether::user_info& _internal_u_info() const;
  ::ComeTogether::user_info* _internal_mutable_u_info();
  public:
  void unsafe_arena_set_allocated_u_info(
      ::ComeTogether::user_info* u_info);
  ::ComeTogether::user_info* unsafe_arena_release_u_info();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ComeTogether.event)
 private:
  class _Internal;
  void set_has_m_info();
  void set_has_c_message();
  void set_has_u_info();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union DataUnion {
    DataUnion() {}
    ::ComeTogether::marker_info* m_info_;
    ::ComeTogether::chat_message* c_message_;
    ::ComeTogether::user_info* u_info_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class generic_chat_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.generic_chat_info) */ {
 public:
  inline generic_chat_info() : generic_chat_info(nullptr) {}
  virtual ~generic_chat_info();

  generic_chat_info(const generic_chat_info& from);
  generic_chat_info(generic_chat_info&& from) noexcept
    : generic_chat_info() {
    *this = ::std::move(from);
  }

  inline generic_chat_info& operator=(const generic_chat_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline generic_chat_info& operator=(generic_chat_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const generic_chat_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const generic_chat_info* internal_default_instance() {
    return reinterpret_cast<const generic_chat_info*>(
               &_generic_chat_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(generic_chat_info& a, generic_chat_info& b) {
    a.Swap(&b);
  }
  inline void Swap(generic_chat_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(generic_chat_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline generic_chat_info* New() const final {
    return CreateMaybeMessage<generic_chat_info>(nullptr);
  }

  generic_chat_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<generic_chat_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const generic_chat_info& from);
  void MergeFrom(const generic_chat_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(generic_chat_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.generic_chat_info";
  }
  protected:
  explicit generic_chat_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantsUuidFieldNumber = 3,
    kUuidFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // repeated string participants_uuid = 3;
  int participants_uuid_size() const;
  private:
  int _internal_participants_uuid_size() const;
  public:
  void clear_participants_uuid();
  const std::string& participants_uuid(int index) const;
  std::string* mutable_participants_uuid(int index);
  void set_participants_uuid(int index, const std::string& value);
  void set_participants_uuid(int index, std::string&& value);
  void set_participants_uuid(int index, const char* value);
  void set_participants_uuid(int index, const char* value, size_t size);
  std::string* add_participants_uuid();
  void add_participants_uuid(const std::string& value);
  void add_participants_uuid(std::string&& value);
  void add_participants_uuid(const char* value);
  void add_participants_uuid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& participants_uuid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_participants_uuid();
  private:
  const std::string& _internal_participants_uuid(int index) const;
  std::string* _internal_add_participants_uuid();
  public:

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.generic_chat_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> participants_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class marker_chat_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.marker_chat_info) */ {
 public:
  inline marker_chat_info() : marker_chat_info(nullptr) {}
  virtual ~marker_chat_info();

  marker_chat_info(const marker_chat_info& from);
  marker_chat_info(marker_chat_info&& from) noexcept
    : marker_chat_info() {
    *this = ::std::move(from);
  }

  inline marker_chat_info& operator=(const marker_chat_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline marker_chat_info& operator=(marker_chat_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const marker_chat_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const marker_chat_info* internal_default_instance() {
    return reinterpret_cast<const marker_chat_info*>(
               &_marker_chat_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(marker_chat_info& a, marker_chat_info& b) {
    a.Swap(&b);
  }
  inline void Swap(marker_chat_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(marker_chat_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline marker_chat_info* New() const final {
    return CreateMaybeMessage<marker_chat_info>(nullptr);
  }

  marker_chat_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<marker_chat_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const marker_chat_info& from);
  void MergeFrom(const marker_chat_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(marker_chat_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.marker_chat_info";
  }
  protected:
  explicit marker_chat_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkerUuidFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // string marker_uuid = 2;
  void clear_marker_uuid();
  const std::string& marker_uuid() const;
  void set_marker_uuid(const std::string& value);
  void set_marker_uuid(std::string&& value);
  void set_marker_uuid(const char* value);
  void set_marker_uuid(const char* value, size_t size);
  std::string* mutable_marker_uuid();
  std::string* release_marker_uuid();
  void set_allocated_marker_uuid(std::string* marker_uuid);
  private:
  const std::string& _internal_marker_uuid() const;
  void _internal_set_marker_uuid(const std::string& value);
  std::string* _internal_mutable_marker_uuid();
  public:

  // .ComeTogether.generic_chat_info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ComeTogether::generic_chat_info& info() const;
  ::ComeTogether::generic_chat_info* release_info();
  ::ComeTogether::generic_chat_info* mutable_info();
  void set_allocated_info(::ComeTogether::generic_chat_info* info);
  private:
  const ::ComeTogether::generic_chat_info& _internal_info() const;
  ::ComeTogether::generic_chat_info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ComeTogether::generic_chat_info* info);
  ::ComeTogether::generic_chat_info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ComeTogether.marker_chat_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_uuid_;
  ::ComeTogether::generic_chat_info* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class get_chat_messages_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.get_chat_messages_request) */ {
 public:
  inline get_chat_messages_request() : get_chat_messages_request(nullptr) {}
  virtual ~get_chat_messages_request();

  get_chat_messages_request(const get_chat_messages_request& from);
  get_chat_messages_request(get_chat_messages_request&& from) noexcept
    : get_chat_messages_request() {
    *this = ::std::move(from);
  }

  inline get_chat_messages_request& operator=(const get_chat_messages_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_chat_messages_request& operator=(get_chat_messages_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_chat_messages_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_chat_messages_request* internal_default_instance() {
    return reinterpret_cast<const get_chat_messages_request*>(
               &_get_chat_messages_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(get_chat_messages_request& a, get_chat_messages_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_chat_messages_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_chat_messages_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_chat_messages_request* New() const final {
    return CreateMaybeMessage<get_chat_messages_request>(nullptr);
  }

  get_chat_messages_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_chat_messages_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_chat_messages_request& from);
  void MergeFrom(const get_chat_messages_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_chat_messages_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.get_chat_messages_request";
  }
  protected:
  explicit get_chat_messages_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kChatUuidFieldNumber = 2,
    kHashFieldNumber = 5,
    kPageSizeFieldNumber = 3,
    kPageNumberFieldNumber = 4,
  };
  // string access_token = 1;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string chat_uuid = 2;
  void clear_chat_uuid();
  const std::string& chat_uuid() const;
  void set_chat_uuid(const std::string& value);
  void set_chat_uuid(std::string&& value);
  void set_chat_uuid(const char* value);
  void set_chat_uuid(const char* value, size_t size);
  std::string* mutable_chat_uuid();
  std::string* release_chat_uuid();
  void set_allocated_chat_uuid(std::string* chat_uuid);
  private:
  const std::string& _internal_chat_uuid() const;
  void _internal_set_chat_uuid(const std::string& value);
  std::string* _internal_mutable_chat_uuid();
  public:

  // string hash = 5;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 page_number = 4;
  void clear_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 page_number() const;
  void set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_number() const;
  void _internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.get_chat_messages_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class chat_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.chat_message) */ {
 public:
  inline chat_message() : chat_message(nullptr) {}
  virtual ~chat_message();

  chat_message(const chat_message& from);
  chat_message(chat_message&& from) noexcept
    : chat_message() {
    *this = ::std::move(from);
  }

  inline chat_message& operator=(const chat_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline chat_message& operator=(chat_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chat_message& default_instance();

  enum ContentCase {
    kText = 3,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chat_message* internal_default_instance() {
    return reinterpret_cast<const chat_message*>(
               &_chat_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(chat_message& a, chat_message& b) {
    a.Swap(&b);
  }
  inline void Swap(chat_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(chat_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chat_message* New() const final {
    return CreateMaybeMessage<chat_message>(nullptr);
  }

  chat_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chat_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chat_message& from);
  void MergeFrom(const chat_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chat_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.chat_message";
  }
  protected:
  explicit chat_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef chat_message_message_type message_type;
  static constexpr message_type TEXT =
    chat_message_message_type_TEXT;
  static inline bool message_type_IsValid(int value) {
    return chat_message_message_type_IsValid(value);
  }
  static constexpr message_type message_type_MIN =
    chat_message_message_type_message_type_MIN;
  static constexpr message_type message_type_MAX =
    chat_message_message_type_message_type_MAX;
  static constexpr int message_type_ARRAYSIZE =
    chat_message_message_type_message_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  message_type_descriptor() {
    return chat_message_message_type_descriptor();
  }
  template<typename T>
  static inline const std::string& message_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, message_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function message_type_Name.");
    return chat_message_message_type_Name(enum_t_value);
  }
  static inline bool message_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      message_type* value) {
    return chat_message_message_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSenderUuidFieldNumber = 2,
    kChatUuidFieldNumber = 5,
    kUuidFieldNumber = 7,
    kSentUnixTimeFieldNumber = 4,
    kSequenceNumberFieldNumber = 6,
    kTypeFieldNumber = 1,
    kTextFieldNumber = 3,
  };
  // string sender_uuid = 2;
  void clear_sender_uuid();
  const std::string& sender_uuid() const;
  void set_sender_uuid(const std::string& value);
  void set_sender_uuid(std::string&& value);
  void set_sender_uuid(const char* value);
  void set_sender_uuid(const char* value, size_t size);
  std::string* mutable_sender_uuid();
  std::string* release_sender_uuid();
  void set_allocated_sender_uuid(std::string* sender_uuid);
  private:
  const std::string& _internal_sender_uuid() const;
  void _internal_set_sender_uuid(const std::string& value);
  std::string* _internal_mutable_sender_uuid();
  public:

  // string chat_uuid = 5;
  void clear_chat_uuid();
  const std::string& chat_uuid() const;
  void set_chat_uuid(const std::string& value);
  void set_chat_uuid(std::string&& value);
  void set_chat_uuid(const char* value);
  void set_chat_uuid(const char* value, size_t size);
  std::string* mutable_chat_uuid();
  std::string* release_chat_uuid();
  void set_allocated_chat_uuid(std::string* chat_uuid);
  private:
  const std::string& _internal_chat_uuid() const;
  void _internal_set_chat_uuid(const std::string& value);
  std::string* _internal_mutable_chat_uuid();
  public:

  // string uuid = 7;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int64 sent_unix_time = 4;
  void clear_sent_unix_time();
  ::PROTOBUF_NAMESPACE_ID::int64 sent_unix_time() const;
  void set_sent_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sent_unix_time() const;
  void _internal_set_sent_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sequence_number = 6;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ComeTogether.chat_message.message_type type = 1;
  void clear_type();
  ::ComeTogether::chat_message_message_type type() const;
  void set_type(::ComeTogether::chat_message_message_type value);
  private:
  ::ComeTogether::chat_message_message_type _internal_type() const;
  void _internal_set_type(::ComeTogether::chat_message_message_type value);
  public:

  // string text = 3;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:ComeTogether.chat_message)
 private:
  class _Internal;
  void set_has_text();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int64 sent_unix_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_number_;
  int type_;
  union ContentUnion {
    ContentUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class send_chat_message_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.send_chat_message_request) */ {
 public:
  inline send_chat_message_request() : send_chat_message_request(nullptr) {}
  virtual ~send_chat_message_request();

  send_chat_message_request(const send_chat_message_request& from);
  send_chat_message_request(send_chat_message_request&& from) noexcept
    : send_chat_message_request() {
    *this = ::std::move(from);
  }

  inline send_chat_message_request& operator=(const send_chat_message_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_chat_message_request& operator=(send_chat_message_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const send_chat_message_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const send_chat_message_request* internal_default_instance() {
    return reinterpret_cast<const send_chat_message_request*>(
               &_send_chat_message_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(send_chat_message_request& a, send_chat_message_request& b) {
    a.Swap(&b);
  }
  inline void Swap(send_chat_message_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_chat_message_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline send_chat_message_request* New() const final {
    return CreateMaybeMessage<send_chat_message_request>(nullptr);
  }

  send_chat_message_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<send_chat_message_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const send_chat_message_request& from);
  void MergeFrom(const send_chat_message_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_chat_message_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.send_chat_message_request";
  }
  protected:
  explicit send_chat_message_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string access_token = 1;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .ComeTogether.chat_message message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::ComeTogether::chat_message& message() const;
  ::ComeTogether::chat_message* release_message();
  ::ComeTogether::chat_message* mutable_message();
  void set_allocated_message(::ComeTogether::chat_message* message);
  private:
  const ::ComeTogether::chat_message& _internal_message() const;
  ::ComeTogether::chat_message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::ComeTogether::chat_message* message);
  ::ComeTogether::chat_message* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:ComeTogether.send_chat_message_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::ComeTogether::chat_message* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class send_chat_message_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.send_chat_message_response) */ {
 public:
  inline send_chat_message_response() : send_chat_message_response(nullptr) {}
  virtual ~send_chat_message_response();

  send_chat_message_response(const send_chat_message_response& from);
  send_chat_message_response(send_chat_message_response&& from) noexcept
    : send_chat_message_response() {
    *this = ::std::move(from);
  }

  inline send_chat_message_response& operator=(const send_chat_message_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_chat_message_response& operator=(send_chat_message_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const send_chat_message_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const send_chat_message_response* internal_default_instance() {
    return reinterpret_cast<const send_chat_message_response*>(
               &_send_chat_message_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(send_chat_message_response& a, send_chat_message_response& b) {
    a.Swap(&b);
  }
  inline void Swap(send_chat_message_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_chat_message_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline send_chat_message_response* New() const final {
    return CreateMaybeMessage<send_chat_message_response>(nullptr);
  }

  send_chat_message_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<send_chat_message_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const send_chat_message_response& from);
  void MergeFrom(const send_chat_message_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_chat_message_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.send_chat_message_response";
  }
  protected:
  explicit send_chat_message_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef send_chat_message_response_result result;
  static constexpr result OK =
    send_chat_message_response_result_OK;
  static constexpr result CHAT_DOES_NOT_EXIST =
    send_chat_message_response_result_CHAT_DOES_NOT_EXIST;
  static constexpr result INSUFFICIENT_PERMISIONS =
    send_chat_message_response_result_INSUFFICIENT_PERMISIONS;
  static constexpr result OTHER =
    send_chat_message_response_result_OTHER;
  static inline bool result_IsValid(int value) {
    return send_chat_message_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    send_chat_message_response_result_result_MIN;
  static constexpr result result_MAX =
    send_chat_message_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    send_chat_message_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return send_chat_message_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return send_chat_message_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return send_chat_message_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActualSequenceNumberFieldNumber = 2,
    kResFieldNumber = 1,
  };
  // int64 actual_sequence_number = 2;
  void clear_actual_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int64 actual_sequence_number() const;
  void set_actual_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_actual_sequence_number() const;
  void _internal_set_actual_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ComeTogether.send_chat_message_response.result res = 1;
  void clear_res();
  ::ComeTogether::send_chat_message_response_result res() const;
  void set_res(::ComeTogether::send_chat_message_response_result value);
  private:
  ::ComeTogether::send_chat_message_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::send_chat_message_response_result value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.send_chat_message_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 actual_sequence_number_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class get_info_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.get_info_request) */ {
 public:
  inline get_info_request() : get_info_request(nullptr) {}
  virtual ~get_info_request();

  get_info_request(const get_info_request& from);
  get_info_request(get_info_request&& from) noexcept
    : get_info_request() {
    *this = ::std::move(from);
  }

  inline get_info_request& operator=(const get_info_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_info_request& operator=(get_info_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_info_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_info_request* internal_default_instance() {
    return reinterpret_cast<const get_info_request*>(
               &_get_info_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(get_info_request& a, get_info_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_info_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_info_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_info_request* New() const final {
    return CreateMaybeMessage<get_info_request>(nullptr);
  }

  get_info_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_info_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_info_request& from);
  void MergeFrom(const get_info_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_info_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.get_info_request";
  }
  protected:
  explicit get_info_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef get_info_request_info_type info_type;
  static constexpr info_type USER =
    get_info_request_info_type_USER;
  static constexpr info_type MARKER =
    get_info_request_info_type_MARKER;
  static constexpr info_type MARKER_CHAT =
    get_info_request_info_type_MARKER_CHAT;
  static inline bool info_type_IsValid(int value) {
    return get_info_request_info_type_IsValid(value);
  }
  static constexpr info_type info_type_MIN =
    get_info_request_info_type_info_type_MIN;
  static constexpr info_type info_type_MAX =
    get_info_request_info_type_info_type_MAX;
  static constexpr int info_type_ARRAYSIZE =
    get_info_request_info_type_info_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  info_type_descriptor() {
    return get_info_request_info_type_descriptor();
  }
  template<typename T>
  static inline const std::string& info_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, info_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function info_type_Name.");
    return get_info_request_info_type_Name(enum_t_value);
  }
  static inline bool info_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      info_type* value) {
    return get_info_request_info_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kTargetUuidFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string access_token = 2;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string target_uuid = 3;
  void clear_target_uuid();
  const std::string& target_uuid() const;
  void set_target_uuid(const std::string& value);
  void set_target_uuid(std::string&& value);
  void set_target_uuid(const char* value);
  void set_target_uuid(const char* value, size_t size);
  std::string* mutable_target_uuid();
  std::string* release_target_uuid();
  void set_allocated_target_uuid(std::string* target_uuid);
  private:
  const std::string& _internal_target_uuid() const;
  void _internal_set_target_uuid(const std::string& value);
  std::string* _internal_mutable_target_uuid();
  public:

  // .ComeTogether.get_info_request.info_type type = 1;
  void clear_type();
  ::ComeTogether::get_info_request_info_type type() const;
  void set_type(::ComeTogether::get_info_request_info_type value);
  private:
  ::ComeTogether::get_info_request_info_type _internal_type() const;
  void _internal_set_type(::ComeTogether::get_info_request_info_type value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.get_info_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_uuid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class get_info_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.get_info_response) */ {
 public:
  inline get_info_response() : get_info_response(nullptr) {}
  virtual ~get_info_response();

  get_info_response(const get_info_response& from);
  get_info_response(get_info_response&& from) noexcept
    : get_info_response() {
    *this = ::std::move(from);
  }

  inline get_info_response& operator=(const get_info_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_info_response& operator=(get_info_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_info_response& default_instance();

  enum DataCase {
    kUInfo = 1,
    kMInfo = 2,
    kMCInfo = 3,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_info_response* internal_default_instance() {
    return reinterpret_cast<const get_info_response*>(
               &_get_info_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(get_info_response& a, get_info_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_info_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_info_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_info_response* New() const final {
    return CreateMaybeMessage<get_info_response>(nullptr);
  }

  get_info_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_info_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_info_response& from);
  void MergeFrom(const get_info_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_info_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.get_info_response";
  }
  protected:
  explicit get_info_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUInfoFieldNumber = 1,
    kMInfoFieldNumber = 2,
    kMCInfoFieldNumber = 3,
  };
  // .ComeTogether.user_info u_info = 1;
  bool has_u_info() const;
  private:
  bool _internal_has_u_info() const;
  public:
  void clear_u_info();
  const ::ComeTogether::user_info& u_info() const;
  ::ComeTogether::user_info* release_u_info();
  ::ComeTogether::user_info* mutable_u_info();
  void set_allocated_u_info(::ComeTogether::user_info* u_info);
  private:
  const ::ComeTogether::user_info& _internal_u_info() const;
  ::ComeTogether::user_info* _internal_mutable_u_info();
  public:
  void unsafe_arena_set_allocated_u_info(
      ::ComeTogether::user_info* u_info);
  ::ComeTogether::user_info* unsafe_arena_release_u_info();

  // .ComeTogether.marker_info m_info = 2;
  bool has_m_info() const;
  private:
  bool _internal_has_m_info() const;
  public:
  void clear_m_info();
  const ::ComeTogether::marker_info& m_info() const;
  ::ComeTogether::marker_info* release_m_info();
  ::ComeTogether::marker_info* mutable_m_info();
  void set_allocated_m_info(::ComeTogether::marker_info* m_info);
  private:
  const ::ComeTogether::marker_info& _internal_m_info() const;
  ::ComeTogether::marker_info* _internal_mutable_m_info();
  public:
  void unsafe_arena_set_allocated_m_info(
      ::ComeTogether::marker_info* m_info);
  ::ComeTogether::marker_info* unsafe_arena_release_m_info();

  // .ComeTogether.marker_chat_info m_c_info = 3;
  bool has_m_c_info() const;
  private:
  bool _internal_has_m_c_info() const;
  public:
  void clear_m_c_info();
  const ::ComeTogether::marker_chat_info& m_c_info() const;
  ::ComeTogether::marker_chat_info* release_m_c_info();
  ::ComeTogether::marker_chat_info* mutable_m_c_info();
  void set_allocated_m_c_info(::ComeTogether::marker_chat_info* m_c_info);
  private:
  const ::ComeTogether::marker_chat_info& _internal_m_c_info() const;
  ::ComeTogether::marker_chat_info* _internal_mutable_m_c_info();
  public:
  void unsafe_arena_set_allocated_m_c_info(
      ::ComeTogether::marker_chat_info* m_c_info);
  ::ComeTogether::marker_chat_info* unsafe_arena_release_m_c_info();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ComeTogether.get_info_response)
 private:
  class _Internal;
  void set_has_u_info();
  void set_has_m_info();
  void set_has_m_c_info();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::ComeTogether::user_info* u_info_;
    ::ComeTogether::marker_info* m_info_;
    ::ComeTogether::marker_chat_info* m_c_info_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class get_images_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.get_images_request) */ {
 public:
  inline get_images_request() : get_images_request(nullptr) {}
  virtual ~get_images_request();

  get_images_request(const get_images_request& from);
  get_images_request(get_images_request&& from) noexcept
    : get_images_request() {
    *this = ::std::move(from);
  }

  inline get_images_request& operator=(const get_images_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_images_request& operator=(get_images_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_images_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_images_request* internal_default_instance() {
    return reinterpret_cast<const get_images_request*>(
               &_get_images_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(get_images_request& a, get_images_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_images_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_images_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_images_request* New() const final {
    return CreateMaybeMessage<get_images_request>(nullptr);
  }

  get_images_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_images_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_images_request& from);
  void MergeFrom(const get_images_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_images_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.get_images_request";
  }
  protected:
  explicit get_images_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef get_images_request_image_type image_type;
  static constexpr image_type USER =
    get_images_request_image_type_USER;
  static constexpr image_type MARKER =
    get_images_request_image_type_MARKER;
  static inline bool image_type_IsValid(int value) {
    return get_images_request_image_type_IsValid(value);
  }
  static constexpr image_type image_type_MIN =
    get_images_request_image_type_image_type_MIN;
  static constexpr image_type image_type_MAX =
    get_images_request_image_type_image_type_MAX;
  static constexpr int image_type_ARRAYSIZE =
    get_images_request_image_type_image_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  image_type_descriptor() {
    return get_images_request_image_type_descriptor();
  }
  template<typename T>
  static inline const std::string& image_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, image_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function image_type_Name.");
    return get_images_request_image_type_Name(enum_t_value);
  }
  static inline bool image_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      image_type* value) {
    return get_images_request_image_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUuidFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kHashFieldNumber = 5,
    kTypeFieldNumber = 1,
    kAmountFieldNumber = 4,
    kStartingSequenceNumberFieldNumber = 6,
  };
  // string target_uuid = 2;
  void clear_target_uuid();
  const std::string& target_uuid() const;
  void set_target_uuid(const std::string& value);
  void set_target_uuid(std::string&& value);
  void set_target_uuid(const char* value);
  void set_target_uuid(const char* value, size_t size);
  std::string* mutable_target_uuid();
  std::string* release_target_uuid();
  void set_allocated_target_uuid(std::string* target_uuid);
  private:
  const std::string& _internal_target_uuid() const;
  void _internal_set_target_uuid(const std::string& value);
  std::string* _internal_mutable_target_uuid();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string hash = 5;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // .ComeTogether.get_images_request.image_type type = 1;
  void clear_type();
  ::ComeTogether::get_images_request_image_type type() const;
  void set_type(::ComeTogether::get_images_request_image_type value);
  private:
  ::ComeTogether::get_images_request_image_type _internal_type() const;
  void _internal_set_type(::ComeTogether::get_images_request_image_type value);
  public:

  // int32 amount = 4;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 starting_sequence_number = 6;
  void clear_starting_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 starting_sequence_number() const;
  void set_starting_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starting_sequence_number() const;
  void _internal_set_starting_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.get_images_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 starting_sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class manage_image_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.manage_image_request) */ {
 public:
  inline manage_image_request() : manage_image_request(nullptr) {}
  virtual ~manage_image_request();

  manage_image_request(const manage_image_request& from);
  manage_image_request(manage_image_request&& from) noexcept
    : manage_image_request() {
    *this = ::std::move(from);
  }

  inline manage_image_request& operator=(const manage_image_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline manage_image_request& operator=(manage_image_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const manage_image_request& default_instance();

  enum DataCase {
    kImage = 4,
    kImageUuid = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const manage_image_request* internal_default_instance() {
    return reinterpret_cast<const manage_image_request*>(
               &_manage_image_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(manage_image_request& a, manage_image_request& b) {
    a.Swap(&b);
  }
  inline void Swap(manage_image_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(manage_image_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline manage_image_request* New() const final {
    return CreateMaybeMessage<manage_image_request>(nullptr);
  }

  manage_image_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<manage_image_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const manage_image_request& from);
  void MergeFrom(const manage_image_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(manage_image_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.manage_image_request";
  }
  protected:
  explicit manage_image_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef manage_image_request_action action;
  static constexpr action UPLOAD_USER_IMAGE =
    manage_image_request_action_UPLOAD_USER_IMAGE;
  static constexpr action DELETE_USER_IMAGE =
    manage_image_request_action_DELETE_USER_IMAGE;
  static constexpr action UPLOAD_MARKER_IMAGE =
    manage_image_request_action_UPLOAD_MARKER_IMAGE;
  static constexpr action DELETE_MARKER_IMAGE =
    manage_image_request_action_DELETE_MARKER_IMAGE;
  static inline bool action_IsValid(int value) {
    return manage_image_request_action_IsValid(value);
  }
  static constexpr action action_MIN =
    manage_image_request_action_action_MIN;
  static constexpr action action_MAX =
    manage_image_request_action_action_MAX;
  static constexpr int action_ARRAYSIZE =
    manage_image_request_action_action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  action_descriptor() {
    return manage_image_request_action_descriptor();
  }
  template<typename T>
  static inline const std::string& action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function action_Name.");
    return manage_image_request_action_Name(enum_t_value);
  }
  static inline bool action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      action* value) {
    return manage_image_request_action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kTargetUuidFieldNumber = 3,
    kActFieldNumber = 1,
    kImageFieldNumber = 4,
    kImageUuidFieldNumber = 5,
  };
  // string access_token = 2;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string target_uuid = 3;
  void clear_target_uuid();
  const std::string& target_uuid() const;
  void set_target_uuid(const std::string& value);
  void set_target_uuid(std::string&& value);
  void set_target_uuid(const char* value);
  void set_target_uuid(const char* value, size_t size);
  std::string* mutable_target_uuid();
  std::string* release_target_uuid();
  void set_allocated_target_uuid(std::string* target_uuid);
  private:
  const std::string& _internal_target_uuid() const;
  void _internal_set_target_uuid(const std::string& value);
  std::string* _internal_mutable_target_uuid();
  public:

  // .ComeTogether.manage_image_request.action act = 1;
  void clear_act();
  ::ComeTogether::manage_image_request_action act() const;
  void set_act(::ComeTogether::manage_image_request_action value);
  private:
  ::ComeTogether::manage_image_request_action _internal_act() const;
  void _internal_set_act(::ComeTogether::manage_image_request_action value);
  public:

  // bytes image = 4;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string image_uuid = 5;
  private:
  bool _internal_has_image_uuid() const;
  public:
  void clear_image_uuid();
  const std::string& image_uuid() const;
  void set_image_uuid(const std::string& value);
  void set_image_uuid(std::string&& value);
  void set_image_uuid(const char* value);
  void set_image_uuid(const char* value, size_t size);
  std::string* mutable_image_uuid();
  std::string* release_image_uuid();
  void set_allocated_image_uuid(std::string* image_uuid);
  private:
  const std::string& _internal_image_uuid() const;
  void _internal_set_image_uuid(const std::string& value);
  std::string* _internal_mutable_image_uuid();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ComeTogether.manage_image_request)
 private:
  class _Internal;
  void set_has_image();
  void set_has_image_uuid();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_uuid_;
  int act_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uuid_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class manage_image_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.manage_image_response) */ {
 public:
  inline manage_image_response() : manage_image_response(nullptr) {}
  virtual ~manage_image_response();

  manage_image_response(const manage_image_response& from);
  manage_image_response(manage_image_response&& from) noexcept
    : manage_image_response() {
    *this = ::std::move(from);
  }

  inline manage_image_response& operator=(const manage_image_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline manage_image_response& operator=(manage_image_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const manage_image_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const manage_image_response* internal_default_instance() {
    return reinterpret_cast<const manage_image_response*>(
               &_manage_image_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(manage_image_response& a, manage_image_response& b) {
    a.Swap(&b);
  }
  inline void Swap(manage_image_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(manage_image_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline manage_image_response* New() const final {
    return CreateMaybeMessage<manage_image_response>(nullptr);
  }

  manage_image_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<manage_image_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const manage_image_response& from);
  void MergeFrom(const manage_image_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(manage_image_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.manage_image_response";
  }
  protected:
  explicit manage_image_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef manage_image_response_result result;
  static constexpr result OK =
    manage_image_response_result_OK;
  static constexpr result INSUFFICIENT_PERMISIONS =
    manage_image_response_result_INSUFFICIENT_PERMISIONS;
  static constexpr result OTHER =
    manage_image_response_result_OTHER;
  static inline bool result_IsValid(int value) {
    return manage_image_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    manage_image_response_result_result_MIN;
  static constexpr result result_MAX =
    manage_image_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    manage_image_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return manage_image_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return manage_image_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return manage_image_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImageUuidFieldNumber = 2,
    kResFieldNumber = 1,
    kImageSequenceNumberFieldNumber = 3,
  };
  // string image_uuid = 2;
  void clear_image_uuid();
  const std::string& image_uuid() const;
  void set_image_uuid(const std::string& value);
  void set_image_uuid(std::string&& value);
  void set_image_uuid(const char* value);
  void set_image_uuid(const char* value, size_t size);
  std::string* mutable_image_uuid();
  std::string* release_image_uuid();
  void set_allocated_image_uuid(std::string* image_uuid);
  private:
  const std::string& _internal_image_uuid() const;
  void _internal_set_image_uuid(const std::string& value);
  std::string* _internal_mutable_image_uuid();
  public:

  // .ComeTogether.manage_image_response.result res = 1;
  void clear_res();
  ::ComeTogether::manage_image_response_result res() const;
  void set_res(::ComeTogether::manage_image_response_result value);
  private:
  ::ComeTogether::manage_image_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::manage_image_response_result value);
  public:

  // int32 image_sequence_number = 3;
  void clear_image_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 image_sequence_number() const;
  void set_image_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_sequence_number() const;
  void _internal_set_image_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.manage_image_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uuid_;
  int res_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class check_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.check_request) */ {
 public:
  inline check_request() : check_request(nullptr) {}
  virtual ~check_request();

  check_request(const check_request& from);
  check_request(check_request&& from) noexcept
    : check_request() {
    *this = ::std::move(from);
  }

  inline check_request& operator=(const check_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline check_request& operator=(check_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const check_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const check_request* internal_default_instance() {
    return reinterpret_cast<const check_request*>(
               &_check_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(check_request& a, check_request& b) {
    a.Swap(&b);
  }
  inline void Swap(check_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(check_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline check_request* New() const final {
    return CreateMaybeMessage<check_request>(nullptr);
  }

  check_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<check_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const check_request& from);
  void MergeFrom(const check_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(check_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.check_request";
  }
  protected:
  explicit check_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef check_request_type type;
  static constexpr type EMAIL =
    check_request_type_EMAIL;
  static constexpr type LOGIN =
    check_request_type_LOGIN;
  static inline bool type_IsValid(int value) {
    return check_request_type_IsValid(value);
  }
  static constexpr type type_MIN =
    check_request_type_type_MIN;
  static constexpr type type_MAX =
    check_request_type_type_MAX;
  static constexpr int type_ARRAYSIZE =
    check_request_type_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  type_descriptor() {
    return check_request_type_descriptor();
  }
  template<typename T>
  static inline const std::string& type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function type_Name.");
    return check_request_type_Name(enum_t_value);
  }
  static inline bool type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      type* value) {
    return check_request_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.check_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class check_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.check_response) */ {
 public:
  inline check_response() : check_response(nullptr) {}
  virtual ~check_response();

  check_response(const check_response& from);
  check_response(check_response&& from) noexcept
    : check_response() {
    *this = ::std::move(from);
  }

  inline check_response& operator=(const check_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline check_response& operator=(check_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const check_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const check_response* internal_default_instance() {
    return reinterpret_cast<const check_response*>(
               &_check_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(check_response& a, check_response& b) {
    a.Swap(&b);
  }
  inline void Swap(check_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(check_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline check_response* New() const final {
    return CreateMaybeMessage<check_response>(nullptr);
  }

  check_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<check_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const check_response& from);
  void MergeFrom(const check_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(check_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.check_response";
  }
  protected:
  explicit check_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef check_response_result result;
  static constexpr result AVAILABLE =
    check_response_result_AVAILABLE;
  static constexpr result TAKEN =
    check_response_result_TAKEN;
  static inline bool result_IsValid(int value) {
    return check_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    check_response_result_result_MIN;
  static constexpr result result_MAX =
    check_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    check_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return check_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return check_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return check_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // .ComeTogether.check_response.result res = 1;
  void clear_res();
  ::ComeTogether::check_response_result res() const;
  void set_res(::ComeTogether::check_response_result value);
  private:
  ::ComeTogether::check_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::check_response_result value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.check_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class login_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.login_request) */ {
 public:
  inline login_request() : login_request(nullptr) {}
  virtual ~login_request();

  login_request(const login_request& from);
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_request& operator=(login_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }
  inline void Swap(login_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_request* New() const final {
    return CreateMaybeMessage<login_request>(nullptr);
  }

  login_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_request& from);
  void MergeFrom(const login_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.login_request";
  }
  protected:
  explicit login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.login_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class login_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.login_response) */ {
 public:
  inline login_response() : login_response(nullptr) {}
  virtual ~login_response();

  login_response(const login_response& from);
  login_response(login_response&& from) noexcept
    : login_response() {
    *this = ::std::move(from);
  }

  inline login_response& operator=(const login_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_response& operator=(login_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_response* internal_default_instance() {
    return reinterpret_cast<const login_response*>(
               &_login_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(login_response& a, login_response& b) {
    a.Swap(&b);
  }
  inline void Swap(login_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_response* New() const final {
    return CreateMaybeMessage<login_response>(nullptr);
  }

  login_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_response& from);
  void MergeFrom(const login_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.login_response";
  }
  protected:
  explicit login_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef login_response_result result;
  static constexpr result OK =
    login_response_result_OK;
  static constexpr result USER_NOT_FOUND =
    login_response_result_USER_NOT_FOUND;
  static constexpr result WRONG_PASSWORD =
    login_response_result_WRONG_PASSWORD;
  static constexpr result OTHER =
    login_response_result_OTHER;
  static inline bool result_IsValid(int value) {
    return login_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    login_response_result_result_MIN;
  static constexpr result result_MAX =
    login_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    login_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return login_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return login_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return login_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 3,
    kInfoFieldNumber = 2,
    kResFieldNumber = 1,
  };
  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .ComeTogether.user_info info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ComeTogether::user_info& info() const;
  ::ComeTogether::user_info* release_info();
  ::ComeTogether::user_info* mutable_info();
  void set_allocated_info(::ComeTogether::user_info* info);
  private:
  const ::ComeTogether::user_info& _internal_info() const;
  ::ComeTogether::user_info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ComeTogether::user_info* info);
  ::ComeTogether::user_info* unsafe_arena_release_info();

  // .ComeTogether.login_response.result res = 1;
  void clear_res();
  ::ComeTogether::login_response_result res() const;
  void set_res(::ComeTogether::login_response_result value);
  private:
  ::ComeTogether::login_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::login_response_result value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.login_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::ComeTogether::user_info* info_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class register_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.register_request) */ {
 public:
  inline register_request() : register_request(nullptr) {}
  virtual ~register_request();

  register_request(const register_request& from);
  register_request(register_request&& from) noexcept
    : register_request() {
    *this = ::std::move(from);
  }

  inline register_request& operator=(const register_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_request& operator=(register_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const register_request* internal_default_instance() {
    return reinterpret_cast<const register_request*>(
               &_register_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(register_request& a, register_request& b) {
    a.Swap(&b);
  }
  inline void Swap(register_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_request* New() const final {
    return CreateMaybeMessage<register_request>(nullptr);
  }

  register_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_request& from);
  void MergeFrom(const register_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.register_request";
  }
  protected:
  explicit register_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .ComeTogether.user_info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ComeTogether::user_info& info() const;
  ::ComeTogether::user_info* release_info();
  ::ComeTogether::user_info* mutable_info();
  void set_allocated_info(::ComeTogether::user_info* info);
  private:
  const ::ComeTogether::user_info& _internal_info() const;
  ::ComeTogether::user_info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ComeTogether::user_info* info);
  ::ComeTogether::user_info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ComeTogether.register_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ComeTogether::user_info* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class register_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.register_response) */ {
 public:
  inline register_response() : register_response(nullptr) {}
  virtual ~register_response();

  register_response(const register_response& from);
  register_response(register_response&& from) noexcept
    : register_response() {
    *this = ::std::move(from);
  }

  inline register_response& operator=(const register_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_response& operator=(register_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const register_response* internal_default_instance() {
    return reinterpret_cast<const register_response*>(
               &_register_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(register_response& a, register_response& b) {
    a.Swap(&b);
  }
  inline void Swap(register_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_response* New() const final {
    return CreateMaybeMessage<register_response>(nullptr);
  }

  register_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_response& from);
  void MergeFrom(const register_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.register_response";
  }
  protected:
  explicit register_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef register_response_result result;
  static constexpr result OK =
    register_response_result_OK;
  static constexpr result EMAIL_ALREADY_TAKEN =
    register_response_result_EMAIL_ALREADY_TAKEN;
  static constexpr result LOGIN_ALREADY_TAKEN =
    register_response_result_LOGIN_ALREADY_TAKEN;
  static constexpr result OTHER =
    register_response_result_OTHER;
  static inline bool result_IsValid(int value) {
    return register_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    register_response_result_result_MIN;
  static constexpr result result_MAX =
    register_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    register_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return register_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return register_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return register_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserUuidFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kResFieldNumber = 1,
  };
  // string user_uuid = 2;
  void clear_user_uuid();
  const std::string& user_uuid() const;
  void set_user_uuid(const std::string& value);
  void set_user_uuid(std::string&& value);
  void set_user_uuid(const char* value);
  void set_user_uuid(const char* value, size_t size);
  std::string* mutable_user_uuid();
  std::string* release_user_uuid();
  void set_allocated_user_uuid(std::string* user_uuid);
  private:
  const std::string& _internal_user_uuid() const;
  void _internal_set_user_uuid(const std::string& value);
  std::string* _internal_mutable_user_uuid();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .ComeTogether.register_response.result res = 1;
  void clear_res();
  ::ComeTogether::register_response_result res() const;
  void set_res(::ComeTogether::register_response_result value);
  private:
  ::ComeTogether::register_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::register_response_result value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.register_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class user_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.user_info) */ {
 public:
  inline user_info() : user_info(nullptr) {}
  virtual ~user_info();

  user_info(const user_info& from);
  user_info(user_info&& from) noexcept
    : user_info() {
    *this = ::std::move(from);
  }

  inline user_info& operator=(const user_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_info& operator=(user_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_info* internal_default_instance() {
    return reinterpret_cast<const user_info*>(
               &_user_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(user_info& a, user_info& b) {
    a.Swap(&b);
  }
  inline void Swap(user_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_info* New() const final {
    return CreateMaybeMessage<user_info>(nullptr);
  }

  user_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_info& from);
  void MergeFrom(const user_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.user_info";
  }
  protected:
  explicit user_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNaemFieldNumber = 4,
    kBioFieldNumber = 5,
    kUuidFieldNumber = 6,
    kImagesAmountFieldNumber = 7,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_naem = 4;
  void clear_last_naem();
  const std::string& last_naem() const;
  void set_last_naem(const std::string& value);
  void set_last_naem(std::string&& value);
  void set_last_naem(const char* value);
  void set_last_naem(const char* value, size_t size);
  std::string* mutable_last_naem();
  std::string* release_last_naem();
  void set_allocated_last_naem(std::string* last_naem);
  private:
  const std::string& _internal_last_naem() const;
  void _internal_set_last_naem(const std::string& value);
  std::string* _internal_mutable_last_naem();
  public:

  // string bio = 5;
  void clear_bio();
  const std::string& bio() const;
  void set_bio(const std::string& value);
  void set_bio(std::string&& value);
  void set_bio(const char* value);
  void set_bio(const char* value, size_t size);
  std::string* mutable_bio();
  std::string* release_bio();
  void set_allocated_bio(std::string* bio);
  private:
  const std::string& _internal_bio() const;
  void _internal_set_bio(const std::string& value);
  std::string* _internal_mutable_bio();
  public:

  // string uuid = 6;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 images_amount = 7;
  void clear_images_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 images_amount() const;
  void set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_images_amount() const;
  void _internal_set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.user_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_naem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 images_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class marker_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.marker_info) */ {
 public:
  inline marker_info() : marker_info(nullptr) {}
  virtual ~marker_info();

  marker_info(const marker_info& from);
  marker_info(marker_info&& from) noexcept
    : marker_info() {
    *this = ::std::move(from);
  }

  inline marker_info& operator=(const marker_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline marker_info& operator=(marker_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const marker_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const marker_info* internal_default_instance() {
    return reinterpret_cast<const marker_info*>(
               &_marker_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(marker_info& a, marker_info& b) {
    a.Swap(&b);
  }
  inline void Swap(marker_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(marker_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline marker_info* New() const final {
    return CreateMaybeMessage<marker_info>(nullptr);
  }

  marker_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<marker_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const marker_info& from);
  void MergeFrom(const marker_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(marker_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.marker_info";
  }
  protected:
  explicit marker_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef marker_info_category category;
  static constexpr category CYCLING =
    marker_info_category_CYCLING;
  static constexpr category FOOTBALL =
    marker_info_category_FOOTBALL;
  static constexpr category BASKETBALL =
    marker_info_category_BASKETBALL;
  static constexpr category RUNNING =
    marker_info_category_RUNNING;
  static constexpr category GYM =
    marker_info_category_GYM;
  static constexpr category GALLERY =
    marker_info_category_GALLERY;
  static constexpr category EXCURSION =
    marker_info_category_EXCURSION;
  static constexpr category THEATER =
    marker_info_category_THEATER;
  static constexpr category CINEMA =
    marker_info_category_CINEMA;
  static constexpr category BAR =
    marker_info_category_BAR;
  static constexpr category RESTAURANT =
    marker_info_category_RESTAURANT;
  static constexpr category NIGTH_CLUB =
    marker_info_category_NIGTH_CLUB;
  static constexpr category HOOKAH =
    marker_info_category_HOOKAH;
  static constexpr category CAFE =
    marker_info_category_CAFE;
  static constexpr category WALK =
    marker_info_category_WALK;
  static constexpr category CONCERT =
    marker_info_category_CONCERT;
  static constexpr category QUEST =
    marker_info_category_QUEST;
  static constexpr category ZOO =
    marker_info_category_ZOO;
  static inline bool category_IsValid(int value) {
    return marker_info_category_IsValid(value);
  }
  static constexpr category category_MIN =
    marker_info_category_category_MIN;
  static constexpr category category_MAX =
    marker_info_category_category_MAX;
  static constexpr int category_ARRAYSIZE =
    marker_info_category_category_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  category_descriptor() {
    return marker_info_category_descriptor();
  }
  template<typename T>
  static inline const std::string& category_Name(T enum_t_value) {
    static_assert(::std::is_same<T, category>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function category_Name.");
    return marker_info_category_Name(enum_t_value);
  }
  static inline bool category_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      category* value) {
    return marker_info_category_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorUuidFieldNumber = 5,
    kNameFieldNumber = 6,
    kExpectedExpensesFieldNumber = 8,
    kUuidFieldNumber = 11,
    kChatUuidFieldNumber = 12,
    kFromUnixTimeFieldNumber = 2,
    kToUnixTimeFieldNumber = 3,
    kCreationUnixTimeFieldNumber = 4,
    kCatFieldNumber = 1,
    kExpectedPeopleAmountFieldNumber = 7,
    kLatitudeFieldNumber = 9,
    kLongitudeFieldNumber = 10,
    kImagesAmountFieldNumber = 13,
  };
  // string creator_uuid = 5;
  void clear_creator_uuid();
  const std::string& creator_uuid() const;
  void set_creator_uuid(const std::string& value);
  void set_creator_uuid(std::string&& value);
  void set_creator_uuid(const char* value);
  void set_creator_uuid(const char* value, size_t size);
  std::string* mutable_creator_uuid();
  std::string* release_creator_uuid();
  void set_allocated_creator_uuid(std::string* creator_uuid);
  private:
  const std::string& _internal_creator_uuid() const;
  void _internal_set_creator_uuid(const std::string& value);
  std::string* _internal_mutable_creator_uuid();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string expected_expenses = 8;
  void clear_expected_expenses();
  const std::string& expected_expenses() const;
  void set_expected_expenses(const std::string& value);
  void set_expected_expenses(std::string&& value);
  void set_expected_expenses(const char* value);
  void set_expected_expenses(const char* value, size_t size);
  std::string* mutable_expected_expenses();
  std::string* release_expected_expenses();
  void set_allocated_expected_expenses(std::string* expected_expenses);
  private:
  const std::string& _internal_expected_expenses() const;
  void _internal_set_expected_expenses(const std::string& value);
  std::string* _internal_mutable_expected_expenses();
  public:

  // string uuid = 11;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string chat_uuid = 12;
  void clear_chat_uuid();
  const std::string& chat_uuid() const;
  void set_chat_uuid(const std::string& value);
  void set_chat_uuid(std::string&& value);
  void set_chat_uuid(const char* value);
  void set_chat_uuid(const char* value, size_t size);
  std::string* mutable_chat_uuid();
  std::string* release_chat_uuid();
  void set_allocated_chat_uuid(std::string* chat_uuid);
  private:
  const std::string& _internal_chat_uuid() const;
  void _internal_set_chat_uuid(const std::string& value);
  std::string* _internal_mutable_chat_uuid();
  public:

  // int64 from_unix_time = 2;
  void clear_from_unix_time();
  ::PROTOBUF_NAMESPACE_ID::int64 from_unix_time() const;
  void set_from_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_unix_time() const;
  void _internal_set_from_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to_unix_time = 3;
  void clear_to_unix_time();
  ::PROTOBUF_NAMESPACE_ID::int64 to_unix_time() const;
  void set_to_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_unix_time() const;
  void _internal_set_to_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 creation_unix_time = 4;
  void clear_creation_unix_time();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_unix_time() const;
  void set_creation_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_unix_time() const;
  void _internal_set_creation_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ComeTogether.marker_info.category cat = 1;
  void clear_cat();
  ::ComeTogether::marker_info_category cat() const;
  void set_cat(::ComeTogether::marker_info_category value);
  private:
  ::ComeTogether::marker_info_category _internal_cat() const;
  void _internal_set_cat(::ComeTogether::marker_info_category value);
  public:

  // int32 expected_people_amount = 7;
  void clear_expected_people_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_people_amount() const;
  void set_expected_people_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_people_amount() const;
  void _internal_set_expected_people_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double latitude = 9;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 10;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // int32 images_amount = 13;
  void clear_images_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 images_amount() const;
  void set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_images_amount() const;
  void _internal_set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.marker_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expected_expenses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_uuid_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_unix_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_unix_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_unix_time_;
  int cat_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_people_amount_;
  double latitude_;
  double longitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 images_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class add_marker_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.add_marker_request) */ {
 public:
  inline add_marker_request() : add_marker_request(nullptr) {}
  virtual ~add_marker_request();

  add_marker_request(const add_marker_request& from);
  add_marker_request(add_marker_request&& from) noexcept
    : add_marker_request() {
    *this = ::std::move(from);
  }

  inline add_marker_request& operator=(const add_marker_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_marker_request& operator=(add_marker_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_marker_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const add_marker_request* internal_default_instance() {
    return reinterpret_cast<const add_marker_request*>(
               &_add_marker_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(add_marker_request& a, add_marker_request& b) {
    a.Swap(&b);
  }
  inline void Swap(add_marker_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_marker_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_marker_request* New() const final {
    return CreateMaybeMessage<add_marker_request>(nullptr);
  }

  add_marker_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_marker_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_marker_request& from);
  void MergeFrom(const add_marker_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_marker_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.add_marker_request";
  }
  protected:
  explicit add_marker_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .ComeTogether.marker_info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ComeTogether::marker_info& info() const;
  ::ComeTogether::marker_info* release_info();
  ::ComeTogether::marker_info* mutable_info();
  void set_allocated_info(::ComeTogether::marker_info* info);
  private:
  const ::ComeTogether::marker_info& _internal_info() const;
  ::ComeTogether::marker_info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ComeTogether::marker_info* info);
  ::ComeTogether::marker_info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ComeTogether.add_marker_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ComeTogether::marker_info* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// -------------------------------------------------------------------

class add_marker_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComeTogether.add_marker_response) */ {
 public:
  inline add_marker_response() : add_marker_response(nullptr) {}
  virtual ~add_marker_response();

  add_marker_response(const add_marker_response& from);
  add_marker_response(add_marker_response&& from) noexcept
    : add_marker_response() {
    *this = ::std::move(from);
  }

  inline add_marker_response& operator=(const add_marker_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_marker_response& operator=(add_marker_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_marker_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const add_marker_response* internal_default_instance() {
    return reinterpret_cast<const add_marker_response*>(
               &_add_marker_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(add_marker_response& a, add_marker_response& b) {
    a.Swap(&b);
  }
  inline void Swap(add_marker_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_marker_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_marker_response* New() const final {
    return CreateMaybeMessage<add_marker_response>(nullptr);
  }

  add_marker_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_marker_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_marker_response& from);
  void MergeFrom(const add_marker_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_marker_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComeTogether.add_marker_response";
  }
  protected:
  explicit add_marker_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_come_5ftogether_2eproto);
    return ::descriptor_table_come_5ftogether_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef add_marker_response_result result;
  static constexpr result OK =
    add_marker_response_result_OK;
  static constexpr result TIME_INTERVAL_TOO_SMALL =
    add_marker_response_result_TIME_INTERVAL_TOO_SMALL;
  static constexpr result CREATION_TIME_OUTDATED =
    add_marker_response_result_CREATION_TIME_OUTDATED;
  static constexpr result OTHER =
    add_marker_response_result_OTHER;
  static inline bool result_IsValid(int value) {
    return add_marker_response_result_IsValid(value);
  }
  static constexpr result result_MIN =
    add_marker_response_result_result_MIN;
  static constexpr result result_MAX =
    add_marker_response_result_result_MAX;
  static constexpr int result_ARRAYSIZE =
    add_marker_response_result_result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  result_descriptor() {
    return add_marker_response_result_descriptor();
  }
  template<typename T>
  static inline const std::string& result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function result_Name.");
    return add_marker_response_result_Name(enum_t_value);
  }
  static inline bool result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      result* value) {
    return add_marker_response_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kChatUuidFieldNumber = 3,
    kResFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string chat_uuid = 3;
  void clear_chat_uuid();
  const std::string& chat_uuid() const;
  void set_chat_uuid(const std::string& value);
  void set_chat_uuid(std::string&& value);
  void set_chat_uuid(const char* value);
  void set_chat_uuid(const char* value, size_t size);
  std::string* mutable_chat_uuid();
  std::string* release_chat_uuid();
  void set_allocated_chat_uuid(std::string* chat_uuid);
  private:
  const std::string& _internal_chat_uuid() const;
  void _internal_set_chat_uuid(const std::string& value);
  std::string* _internal_mutable_chat_uuid();
  public:

  // .ComeTogether.add_marker_response.result res = 1;
  void clear_res();
  ::ComeTogether::add_marker_response_result res() const;
  void set_res(::ComeTogether::add_marker_response_result value);
  private:
  ::ComeTogether::add_marker_response_result _internal_res() const;
  void _internal_set_res(::ComeTogether::add_marker_response_result value);
  public:

  // @@protoc_insertion_point(class_scope:ComeTogether.add_marker_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_uuid_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_come_5ftogether_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// image

// bytes data = 1;
inline void image::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& image::data() const {
  // @@protoc_insertion_point(field_get:ComeTogether.image.data)
  return _internal_data();
}
inline void image::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ComeTogether.image.data)
}
inline std::string* image::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.image.data)
  return _internal_mutable_data();
}
inline const std::string& image::_internal_data() const {
  return data_.Get();
}
inline void image::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void image::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.image.data)
}
inline void image::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.image.data)
}
inline void image::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.image.data)
}
inline std::string* image::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* image::release_data() {
  // @@protoc_insertion_point(field_release:ComeTogether.image.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.image.data)
}

// string uuid = 2;
inline void image::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& image::uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.image.uuid)
  return _internal_uuid();
}
inline void image::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.image.uuid)
}
inline std::string* image::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.image.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& image::_internal_uuid() const {
  return uuid_.Get();
}
inline void image::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void image::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.image.uuid)
}
inline void image::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.image.uuid)
}
inline void image::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.image.uuid)
}
inline std::string* image::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* image::release_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.image.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void image::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.image.uuid)
}

// int32 sequence_number = 3;
inline void image::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 image::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 image::sequence_number() const {
  // @@protoc_insertion_point(field_get:ComeTogether.image.sequence_number)
  return _internal_sequence_number();
}
inline void image::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void image::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:ComeTogether.image.sequence_number)
}

// -------------------------------------------------------------------

// access_token

// string token = 1;
inline void access_token::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& access_token::token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.access_token.token)
  return _internal_token();
}
inline void access_token::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.access_token.token)
}
inline std::string* access_token::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.access_token.token)
  return _internal_mutable_token();
}
inline const std::string& access_token::_internal_token() const {
  return token_.Get();
}
inline void access_token::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void access_token::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.access_token.token)
}
inline void access_token::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.access_token.token)
}
inline void access_token::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.access_token.token)
}
inline std::string* access_token::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* access_token::release_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.access_token.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void access_token::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.access_token.token)
}

// -------------------------------------------------------------------

// empty

// -------------------------------------------------------------------

// ask_token_request

// string email = 1;
inline void ask_token_request::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ask_token_request::email() const {
  // @@protoc_insertion_point(field_get:ComeTogether.ask_token_request.email)
  return _internal_email();
}
inline void ask_token_request::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ComeTogether.ask_token_request.email)
}
inline std::string* ask_token_request::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.ask_token_request.email)
  return _internal_mutable_email();
}
inline const std::string& ask_token_request::_internal_email() const {
  return email_.Get();
}
inline void ask_token_request::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ask_token_request::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.ask_token_request.email)
}
inline void ask_token_request::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.ask_token_request.email)
}
inline void ask_token_request::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.ask_token_request.email)
}
inline std::string* ask_token_request::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ask_token_request::release_email() {
  // @@protoc_insertion_point(field_release:ComeTogether.ask_token_request.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ask_token_request::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.ask_token_request.email)
}

// -------------------------------------------------------------------

// verify_token_request

// string email = 1;
inline void verify_token_request::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& verify_token_request::email() const {
  // @@protoc_insertion_point(field_get:ComeTogether.verify_token_request.email)
  return _internal_email();
}
inline void verify_token_request::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ComeTogether.verify_token_request.email)
}
inline std::string* verify_token_request::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.verify_token_request.email)
  return _internal_mutable_email();
}
inline const std::string& verify_token_request::_internal_email() const {
  return email_.Get();
}
inline void verify_token_request::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void verify_token_request::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.verify_token_request.email)
}
inline void verify_token_request::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.verify_token_request.email)
}
inline void verify_token_request::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.verify_token_request.email)
}
inline std::string* verify_token_request::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* verify_token_request::release_email() {
  // @@protoc_insertion_point(field_release:ComeTogether.verify_token_request.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void verify_token_request::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.verify_token_request.email)
}

// string token = 2;
inline void verify_token_request::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& verify_token_request::token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.verify_token_request.token)
  return _internal_token();
}
inline void verify_token_request::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.verify_token_request.token)
}
inline std::string* verify_token_request::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.verify_token_request.token)
  return _internal_mutable_token();
}
inline const std::string& verify_token_request::_internal_token() const {
  return token_.Get();
}
inline void verify_token_request::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void verify_token_request::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.verify_token_request.token)
}
inline void verify_token_request::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.verify_token_request.token)
}
inline void verify_token_request::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.verify_token_request.token)
}
inline std::string* verify_token_request::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* verify_token_request::release_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.verify_token_request.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void verify_token_request::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.verify_token_request.token)
}

// -------------------------------------------------------------------

// verify_token_response

// .ComeTogether.verify_token_response.result res = 1;
inline void verify_token_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::verify_token_response_result verify_token_response::_internal_res() const {
  return static_cast< ::ComeTogether::verify_token_response_result >(res_);
}
inline ::ComeTogether::verify_token_response_result verify_token_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.verify_token_response.res)
  return _internal_res();
}
inline void verify_token_response::_internal_set_res(::ComeTogether::verify_token_response_result value) {
  
  res_ = value;
}
inline void verify_token_response::set_res(::ComeTogether::verify_token_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.verify_token_response.res)
}

// -------------------------------------------------------------------

// update_info_request

// string access_token = 1;
inline void update_info_request::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& update_info_request::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.update_info_request.access_token)
  return _internal_access_token();
}
inline void update_info_request::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.update_info_request.access_token)
}
inline std::string* update_info_request::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.update_info_request.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& update_info_request::_internal_access_token() const {
  return access_token_.Get();
}
inline void update_info_request::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void update_info_request::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.update_info_request.access_token)
}
inline void update_info_request::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.update_info_request.access_token)
}
inline void update_info_request::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.update_info_request.access_token)
}
inline std::string* update_info_request::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* update_info_request::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.update_info_request.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void update_info_request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.update_info_request.access_token)
}

// .ComeTogether.update_info_request.update_type type = 2;
inline void update_info_request::clear_type() {
  type_ = 0;
}
inline ::ComeTogether::update_info_request_update_type update_info_request::_internal_type() const {
  return static_cast< ::ComeTogether::update_info_request_update_type >(type_);
}
inline ::ComeTogether::update_info_request_update_type update_info_request::type() const {
  // @@protoc_insertion_point(field_get:ComeTogether.update_info_request.type)
  return _internal_type();
}
inline void update_info_request::_internal_set_type(::ComeTogether::update_info_request_update_type value) {
  
  type_ = value;
}
inline void update_info_request::set_type(::ComeTogether::update_info_request_update_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ComeTogether.update_info_request.type)
}

// .ComeTogether.marker_info m_info = 3;
inline bool update_info_request::_internal_has_m_info() const {
  return data_case() == kMInfo;
}
inline bool update_info_request::has_m_info() const {
  return _internal_has_m_info();
}
inline void update_info_request::set_has_m_info() {
  _oneof_case_[0] = kMInfo;
}
inline void update_info_request::clear_m_info() {
  if (_internal_has_m_info()) {
    if (GetArena() == nullptr) {
      delete data_.m_info_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::marker_info* update_info_request::release_m_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.update_info_request.m_info)
  if (_internal_has_m_info()) {
    clear_has_data();
      ::ComeTogether::marker_info* temp = data_.m_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.m_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::marker_info& update_info_request::_internal_m_info() const {
  return _internal_has_m_info()
      ? *data_.m_info_
      : *reinterpret_cast< ::ComeTogether::marker_info*>(&::ComeTogether::_marker_info_default_instance_);
}
inline const ::ComeTogether::marker_info& update_info_request::m_info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.update_info_request.m_info)
  return _internal_m_info();
}
inline ::ComeTogether::marker_info* update_info_request::unsafe_arena_release_m_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.update_info_request.m_info)
  if (_internal_has_m_info()) {
    clear_has_data();
    ::ComeTogether::marker_info* temp = data_.m_info_;
    data_.m_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void update_info_request::unsafe_arena_set_allocated_m_info(::ComeTogether::marker_info* m_info) {
  clear_data();
  if (m_info) {
    set_has_m_info();
    data_.m_info_ = m_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.update_info_request.m_info)
}
inline ::ComeTogether::marker_info* update_info_request::_internal_mutable_m_info() {
  if (!_internal_has_m_info()) {
    clear_data();
    set_has_m_info();
    data_.m_info_ = CreateMaybeMessage< ::ComeTogether::marker_info >(GetArena());
  }
  return data_.m_info_;
}
inline ::ComeTogether::marker_info* update_info_request::mutable_m_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.update_info_request.m_info)
  return _internal_mutable_m_info();
}

// .ComeTogether.user_info u_info = 4;
inline bool update_info_request::_internal_has_u_info() const {
  return data_case() == kUInfo;
}
inline bool update_info_request::has_u_info() const {
  return _internal_has_u_info();
}
inline void update_info_request::set_has_u_info() {
  _oneof_case_[0] = kUInfo;
}
inline void update_info_request::clear_u_info() {
  if (_internal_has_u_info()) {
    if (GetArena() == nullptr) {
      delete data_.u_info_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::user_info* update_info_request::release_u_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.update_info_request.u_info)
  if (_internal_has_u_info()) {
    clear_has_data();
      ::ComeTogether::user_info* temp = data_.u_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.u_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::user_info& update_info_request::_internal_u_info() const {
  return _internal_has_u_info()
      ? *data_.u_info_
      : *reinterpret_cast< ::ComeTogether::user_info*>(&::ComeTogether::_user_info_default_instance_);
}
inline const ::ComeTogether::user_info& update_info_request::u_info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.update_info_request.u_info)
  return _internal_u_info();
}
inline ::ComeTogether::user_info* update_info_request::unsafe_arena_release_u_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.update_info_request.u_info)
  if (_internal_has_u_info()) {
    clear_has_data();
    ::ComeTogether::user_info* temp = data_.u_info_;
    data_.u_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void update_info_request::unsafe_arena_set_allocated_u_info(::ComeTogether::user_info* u_info) {
  clear_data();
  if (u_info) {
    set_has_u_info();
    data_.u_info_ = u_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.update_info_request.u_info)
}
inline ::ComeTogether::user_info* update_info_request::_internal_mutable_u_info() {
  if (!_internal_has_u_info()) {
    clear_data();
    set_has_u_info();
    data_.u_info_ = CreateMaybeMessage< ::ComeTogether::user_info >(GetArena());
  }
  return data_.u_info_;
}
inline ::ComeTogether::user_info* update_info_request::mutable_u_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.update_info_request.u_info)
  return _internal_mutable_u_info();
}

inline bool update_info_request::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void update_info_request::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline update_info_request::DataCase update_info_request::data_case() const {
  return update_info_request::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// update_info_response

// .ComeTogether.update_info_response.result res = 1;
inline void update_info_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::update_info_response_result update_info_response::_internal_res() const {
  return static_cast< ::ComeTogether::update_info_response_result >(res_);
}
inline ::ComeTogether::update_info_response_result update_info_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.update_info_response.res)
  return _internal_res();
}
inline void update_info_response::_internal_set_res(::ComeTogether::update_info_response_result value) {
  
  res_ = value;
}
inline void update_info_response::set_res(::ComeTogether::update_info_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.update_info_response.res)
}

// -------------------------------------------------------------------

// event

// .ComeTogether.event.event_type type = 1;
inline void event::clear_type() {
  type_ = 0;
}
inline ::ComeTogether::event_event_type event::_internal_type() const {
  return static_cast< ::ComeTogether::event_event_type >(type_);
}
inline ::ComeTogether::event_event_type event::type() const {
  // @@protoc_insertion_point(field_get:ComeTogether.event.type)
  return _internal_type();
}
inline void event::_internal_set_type(::ComeTogether::event_event_type value) {
  
  type_ = value;
}
inline void event::set_type(::ComeTogether::event_event_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ComeTogether.event.type)
}

// .ComeTogether.marker_info m_info = 2;
inline bool event::_internal_has_m_info() const {
  return data_case() == kMInfo;
}
inline bool event::has_m_info() const {
  return _internal_has_m_info();
}
inline void event::set_has_m_info() {
  _oneof_case_[0] = kMInfo;
}
inline void event::clear_m_info() {
  if (_internal_has_m_info()) {
    if (GetArena() == nullptr) {
      delete data_.m_info_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::marker_info* event::release_m_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.event.m_info)
  if (_internal_has_m_info()) {
    clear_has_data();
      ::ComeTogether::marker_info* temp = data_.m_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.m_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::marker_info& event::_internal_m_info() const {
  return _internal_has_m_info()
      ? *data_.m_info_
      : *reinterpret_cast< ::ComeTogether::marker_info*>(&::ComeTogether::_marker_info_default_instance_);
}
inline const ::ComeTogether::marker_info& event::m_info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.event.m_info)
  return _internal_m_info();
}
inline ::ComeTogether::marker_info* event::unsafe_arena_release_m_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.event.m_info)
  if (_internal_has_m_info()) {
    clear_has_data();
    ::ComeTogether::marker_info* temp = data_.m_info_;
    data_.m_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void event::unsafe_arena_set_allocated_m_info(::ComeTogether::marker_info* m_info) {
  clear_data();
  if (m_info) {
    set_has_m_info();
    data_.m_info_ = m_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.event.m_info)
}
inline ::ComeTogether::marker_info* event::_internal_mutable_m_info() {
  if (!_internal_has_m_info()) {
    clear_data();
    set_has_m_info();
    data_.m_info_ = CreateMaybeMessage< ::ComeTogether::marker_info >(GetArena());
  }
  return data_.m_info_;
}
inline ::ComeTogether::marker_info* event::mutable_m_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.event.m_info)
  return _internal_mutable_m_info();
}

// .ComeTogether.chat_message c_message = 3;
inline bool event::_internal_has_c_message() const {
  return data_case() == kCMessage;
}
inline bool event::has_c_message() const {
  return _internal_has_c_message();
}
inline void event::set_has_c_message() {
  _oneof_case_[0] = kCMessage;
}
inline void event::clear_c_message() {
  if (_internal_has_c_message()) {
    if (GetArena() == nullptr) {
      delete data_.c_message_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::chat_message* event::release_c_message() {
  // @@protoc_insertion_point(field_release:ComeTogether.event.c_message)
  if (_internal_has_c_message()) {
    clear_has_data();
      ::ComeTogether::chat_message* temp = data_.c_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.c_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::chat_message& event::_internal_c_message() const {
  return _internal_has_c_message()
      ? *data_.c_message_
      : *reinterpret_cast< ::ComeTogether::chat_message*>(&::ComeTogether::_chat_message_default_instance_);
}
inline const ::ComeTogether::chat_message& event::c_message() const {
  // @@protoc_insertion_point(field_get:ComeTogether.event.c_message)
  return _internal_c_message();
}
inline ::ComeTogether::chat_message* event::unsafe_arena_release_c_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.event.c_message)
  if (_internal_has_c_message()) {
    clear_has_data();
    ::ComeTogether::chat_message* temp = data_.c_message_;
    data_.c_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void event::unsafe_arena_set_allocated_c_message(::ComeTogether::chat_message* c_message) {
  clear_data();
  if (c_message) {
    set_has_c_message();
    data_.c_message_ = c_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.event.c_message)
}
inline ::ComeTogether::chat_message* event::_internal_mutable_c_message() {
  if (!_internal_has_c_message()) {
    clear_data();
    set_has_c_message();
    data_.c_message_ = CreateMaybeMessage< ::ComeTogether::chat_message >(GetArena());
  }
  return data_.c_message_;
}
inline ::ComeTogether::chat_message* event::mutable_c_message() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.event.c_message)
  return _internal_mutable_c_message();
}

// .ComeTogether.user_info u_info = 4;
inline bool event::_internal_has_u_info() const {
  return data_case() == kUInfo;
}
inline bool event::has_u_info() const {
  return _internal_has_u_info();
}
inline void event::set_has_u_info() {
  _oneof_case_[0] = kUInfo;
}
inline void event::clear_u_info() {
  if (_internal_has_u_info()) {
    if (GetArena() == nullptr) {
      delete data_.u_info_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::user_info* event::release_u_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.event.u_info)
  if (_internal_has_u_info()) {
    clear_has_data();
      ::ComeTogether::user_info* temp = data_.u_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.u_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::user_info& event::_internal_u_info() const {
  return _internal_has_u_info()
      ? *data_.u_info_
      : *reinterpret_cast< ::ComeTogether::user_info*>(&::ComeTogether::_user_info_default_instance_);
}
inline const ::ComeTogether::user_info& event::u_info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.event.u_info)
  return _internal_u_info();
}
inline ::ComeTogether::user_info* event::unsafe_arena_release_u_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.event.u_info)
  if (_internal_has_u_info()) {
    clear_has_data();
    ::ComeTogether::user_info* temp = data_.u_info_;
    data_.u_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void event::unsafe_arena_set_allocated_u_info(::ComeTogether::user_info* u_info) {
  clear_data();
  if (u_info) {
    set_has_u_info();
    data_.u_info_ = u_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.event.u_info)
}
inline ::ComeTogether::user_info* event::_internal_mutable_u_info() {
  if (!_internal_has_u_info()) {
    clear_data();
    set_has_u_info();
    data_.u_info_ = CreateMaybeMessage< ::ComeTogether::user_info >(GetArena());
  }
  return data_.u_info_;
}
inline ::ComeTogether::user_info* event::mutable_u_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.event.u_info)
  return _internal_mutable_u_info();
}

inline bool event::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void event::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline event::DataCase event::data_case() const {
  return event::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// generic_chat_info

// string uuid = 1;
inline void generic_chat_info::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& generic_chat_info::uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.generic_chat_info.uuid)
  return _internal_uuid();
}
inline void generic_chat_info::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.generic_chat_info.uuid)
}
inline std::string* generic_chat_info::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.generic_chat_info.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& generic_chat_info::_internal_uuid() const {
  return uuid_.Get();
}
inline void generic_chat_info::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void generic_chat_info::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.generic_chat_info.uuid)
}
inline void generic_chat_info::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.generic_chat_info.uuid)
}
inline void generic_chat_info::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.generic_chat_info.uuid)
}
inline std::string* generic_chat_info::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* generic_chat_info::release_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.generic_chat_info.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void generic_chat_info::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.generic_chat_info.uuid)
}

// string title = 2;
inline void generic_chat_info::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& generic_chat_info::title() const {
  // @@protoc_insertion_point(field_get:ComeTogether.generic_chat_info.title)
  return _internal_title();
}
inline void generic_chat_info::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:ComeTogether.generic_chat_info.title)
}
inline std::string* generic_chat_info::mutable_title() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.generic_chat_info.title)
  return _internal_mutable_title();
}
inline const std::string& generic_chat_info::_internal_title() const {
  return title_.Get();
}
inline void generic_chat_info::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void generic_chat_info::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.generic_chat_info.title)
}
inline void generic_chat_info::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.generic_chat_info.title)
}
inline void generic_chat_info::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.generic_chat_info.title)
}
inline std::string* generic_chat_info::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* generic_chat_info::release_title() {
  // @@protoc_insertion_point(field_release:ComeTogether.generic_chat_info.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void generic_chat_info::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.generic_chat_info.title)
}

// repeated string participants_uuid = 3;
inline int generic_chat_info::_internal_participants_uuid_size() const {
  return participants_uuid_.size();
}
inline int generic_chat_info::participants_uuid_size() const {
  return _internal_participants_uuid_size();
}
inline void generic_chat_info::clear_participants_uuid() {
  participants_uuid_.Clear();
}
inline std::string* generic_chat_info::add_participants_uuid() {
  // @@protoc_insertion_point(field_add_mutable:ComeTogether.generic_chat_info.participants_uuid)
  return _internal_add_participants_uuid();
}
inline const std::string& generic_chat_info::_internal_participants_uuid(int index) const {
  return participants_uuid_.Get(index);
}
inline const std::string& generic_chat_info::participants_uuid(int index) const {
  // @@protoc_insertion_point(field_get:ComeTogether.generic_chat_info.participants_uuid)
  return _internal_participants_uuid(index);
}
inline std::string* generic_chat_info::mutable_participants_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:ComeTogether.generic_chat_info.participants_uuid)
  return participants_uuid_.Mutable(index);
}
inline void generic_chat_info::set_participants_uuid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ComeTogether.generic_chat_info.participants_uuid)
  participants_uuid_.Mutable(index)->assign(value);
}
inline void generic_chat_info::set_participants_uuid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ComeTogether.generic_chat_info.participants_uuid)
  participants_uuid_.Mutable(index)->assign(std::move(value));
}
inline void generic_chat_info::set_participants_uuid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  participants_uuid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ComeTogether.generic_chat_info.participants_uuid)
}
inline void generic_chat_info::set_participants_uuid(int index, const char* value, size_t size) {
  participants_uuid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.generic_chat_info.participants_uuid)
}
inline std::string* generic_chat_info::_internal_add_participants_uuid() {
  return participants_uuid_.Add();
}
inline void generic_chat_info::add_participants_uuid(const std::string& value) {
  participants_uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ComeTogether.generic_chat_info.participants_uuid)
}
inline void generic_chat_info::add_participants_uuid(std::string&& value) {
  participants_uuid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ComeTogether.generic_chat_info.participants_uuid)
}
inline void generic_chat_info::add_participants_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  participants_uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ComeTogether.generic_chat_info.participants_uuid)
}
inline void generic_chat_info::add_participants_uuid(const char* value, size_t size) {
  participants_uuid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ComeTogether.generic_chat_info.participants_uuid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
generic_chat_info::participants_uuid() const {
  // @@protoc_insertion_point(field_list:ComeTogether.generic_chat_info.participants_uuid)
  return participants_uuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
generic_chat_info::mutable_participants_uuid() {
  // @@protoc_insertion_point(field_mutable_list:ComeTogether.generic_chat_info.participants_uuid)
  return &participants_uuid_;
}

// -------------------------------------------------------------------

// marker_chat_info

// .ComeTogether.generic_chat_info info = 1;
inline bool marker_chat_info::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool marker_chat_info::has_info() const {
  return _internal_has_info();
}
inline void marker_chat_info::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::ComeTogether::generic_chat_info& marker_chat_info::_internal_info() const {
  const ::ComeTogether::generic_chat_info* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ComeTogether::generic_chat_info*>(
      &::ComeTogether::_generic_chat_info_default_instance_);
}
inline const ::ComeTogether::generic_chat_info& marker_chat_info::info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_chat_info.info)
  return _internal_info();
}
inline void marker_chat_info::unsafe_arena_set_allocated_info(
    ::ComeTogether::generic_chat_info* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.marker_chat_info.info)
}
inline ::ComeTogether::generic_chat_info* marker_chat_info::release_info() {
  
  ::ComeTogether::generic_chat_info* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ComeTogether::generic_chat_info* marker_chat_info::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.marker_chat_info.info)
  
  ::ComeTogether::generic_chat_info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::ComeTogether::generic_chat_info* marker_chat_info::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ComeTogether::generic_chat_info>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::ComeTogether::generic_chat_info* marker_chat_info::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.marker_chat_info.info)
  return _internal_mutable_info();
}
inline void marker_chat_info::set_allocated_info(::ComeTogether::generic_chat_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.marker_chat_info.info)
}

// string marker_uuid = 2;
inline void marker_chat_info::clear_marker_uuid() {
  marker_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& marker_chat_info::marker_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_chat_info.marker_uuid)
  return _internal_marker_uuid();
}
inline void marker_chat_info::set_marker_uuid(const std::string& value) {
  _internal_set_marker_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_chat_info.marker_uuid)
}
inline std::string* marker_chat_info::mutable_marker_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.marker_chat_info.marker_uuid)
  return _internal_mutable_marker_uuid();
}
inline const std::string& marker_chat_info::_internal_marker_uuid() const {
  return marker_uuid_.Get();
}
inline void marker_chat_info::_internal_set_marker_uuid(const std::string& value) {
  
  marker_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void marker_chat_info::set_marker_uuid(std::string&& value) {
  
  marker_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.marker_chat_info.marker_uuid)
}
inline void marker_chat_info::set_marker_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marker_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.marker_chat_info.marker_uuid)
}
inline void marker_chat_info::set_marker_uuid(const char* value,
    size_t size) {
  
  marker_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.marker_chat_info.marker_uuid)
}
inline std::string* marker_chat_info::_internal_mutable_marker_uuid() {
  
  return marker_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* marker_chat_info::release_marker_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.marker_chat_info.marker_uuid)
  return marker_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void marker_chat_info::set_allocated_marker_uuid(std::string* marker_uuid) {
  if (marker_uuid != nullptr) {
    
  } else {
    
  }
  marker_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.marker_chat_info.marker_uuid)
}

// -------------------------------------------------------------------

// get_chat_messages_request

// string access_token = 1;
inline void get_chat_messages_request::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_chat_messages_request::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_chat_messages_request.access_token)
  return _internal_access_token();
}
inline void get_chat_messages_request::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_chat_messages_request.access_token)
}
inline std::string* get_chat_messages_request::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_chat_messages_request.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& get_chat_messages_request::_internal_access_token() const {
  return access_token_.Get();
}
inline void get_chat_messages_request::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_chat_messages_request::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_chat_messages_request.access_token)
}
inline void get_chat_messages_request::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_chat_messages_request.access_token)
}
inline void get_chat_messages_request::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_chat_messages_request.access_token)
}
inline std::string* get_chat_messages_request::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_chat_messages_request::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_chat_messages_request.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_chat_messages_request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_chat_messages_request.access_token)
}

// string chat_uuid = 2;
inline void get_chat_messages_request::clear_chat_uuid() {
  chat_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_chat_messages_request::chat_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_chat_messages_request.chat_uuid)
  return _internal_chat_uuid();
}
inline void get_chat_messages_request::set_chat_uuid(const std::string& value) {
  _internal_set_chat_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_chat_messages_request.chat_uuid)
}
inline std::string* get_chat_messages_request::mutable_chat_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_chat_messages_request.chat_uuid)
  return _internal_mutable_chat_uuid();
}
inline const std::string& get_chat_messages_request::_internal_chat_uuid() const {
  return chat_uuid_.Get();
}
inline void get_chat_messages_request::_internal_set_chat_uuid(const std::string& value) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_chat_messages_request::set_chat_uuid(std::string&& value) {
  
  chat_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_chat_messages_request.chat_uuid)
}
inline void get_chat_messages_request::set_chat_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_chat_messages_request.chat_uuid)
}
inline void get_chat_messages_request::set_chat_uuid(const char* value,
    size_t size) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_chat_messages_request.chat_uuid)
}
inline std::string* get_chat_messages_request::_internal_mutable_chat_uuid() {
  
  return chat_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_chat_messages_request::release_chat_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_chat_messages_request.chat_uuid)
  return chat_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_chat_messages_request::set_allocated_chat_uuid(std::string* chat_uuid) {
  if (chat_uuid != nullptr) {
    
  } else {
    
  }
  chat_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_chat_messages_request.chat_uuid)
}

// int32 page_size = 3;
inline void get_chat_messages_request::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_chat_messages_request::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_chat_messages_request::page_size() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_chat_messages_request.page_size)
  return _internal_page_size();
}
inline void get_chat_messages_request::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void get_chat_messages_request::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_chat_messages_request.page_size)
}

// int32 page_number = 4;
inline void get_chat_messages_request::clear_page_number() {
  page_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_chat_messages_request::_internal_page_number() const {
  return page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_chat_messages_request::page_number() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_chat_messages_request.page_number)
  return _internal_page_number();
}
inline void get_chat_messages_request::_internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_number_ = value;
}
inline void get_chat_messages_request::set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_chat_messages_request.page_number)
}

// string hash = 5;
inline void get_chat_messages_request::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_chat_messages_request::hash() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_chat_messages_request.hash)
  return _internal_hash();
}
inline void get_chat_messages_request::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_chat_messages_request.hash)
}
inline std::string* get_chat_messages_request::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_chat_messages_request.hash)
  return _internal_mutable_hash();
}
inline const std::string& get_chat_messages_request::_internal_hash() const {
  return hash_.Get();
}
inline void get_chat_messages_request::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_chat_messages_request::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_chat_messages_request.hash)
}
inline void get_chat_messages_request::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_chat_messages_request.hash)
}
inline void get_chat_messages_request::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_chat_messages_request.hash)
}
inline std::string* get_chat_messages_request::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_chat_messages_request::release_hash() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_chat_messages_request.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_chat_messages_request::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_chat_messages_request.hash)
}

// -------------------------------------------------------------------

// chat_message

// .ComeTogether.chat_message.message_type type = 1;
inline void chat_message::clear_type() {
  type_ = 0;
}
inline ::ComeTogether::chat_message_message_type chat_message::_internal_type() const {
  return static_cast< ::ComeTogether::chat_message_message_type >(type_);
}
inline ::ComeTogether::chat_message_message_type chat_message::type() const {
  // @@protoc_insertion_point(field_get:ComeTogether.chat_message.type)
  return _internal_type();
}
inline void chat_message::_internal_set_type(::ComeTogether::chat_message_message_type value) {
  
  type_ = value;
}
inline void chat_message::set_type(::ComeTogether::chat_message_message_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.type)
}

// string sender_uuid = 2;
inline void chat_message::clear_sender_uuid() {
  sender_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chat_message::sender_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.chat_message.sender_uuid)
  return _internal_sender_uuid();
}
inline void chat_message::set_sender_uuid(const std::string& value) {
  _internal_set_sender_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.sender_uuid)
}
inline std::string* chat_message::mutable_sender_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.chat_message.sender_uuid)
  return _internal_mutable_sender_uuid();
}
inline const std::string& chat_message::_internal_sender_uuid() const {
  return sender_uuid_.Get();
}
inline void chat_message::_internal_set_sender_uuid(const std::string& value) {
  
  sender_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chat_message::set_sender_uuid(std::string&& value) {
  
  sender_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.chat_message.sender_uuid)
}
inline void chat_message::set_sender_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.chat_message.sender_uuid)
}
inline void chat_message::set_sender_uuid(const char* value,
    size_t size) {
  
  sender_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.chat_message.sender_uuid)
}
inline std::string* chat_message::_internal_mutable_sender_uuid() {
  
  return sender_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chat_message::release_sender_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.chat_message.sender_uuid)
  return sender_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chat_message::set_allocated_sender_uuid(std::string* sender_uuid) {
  if (sender_uuid != nullptr) {
    
  } else {
    
  }
  sender_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.chat_message.sender_uuid)
}

// string text = 3;
inline bool chat_message::_internal_has_text() const {
  return content_case() == kText;
}
inline void chat_message::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void chat_message::clear_text() {
  if (_internal_has_text()) {
    content_.text_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_content();
  }
}
inline const std::string& chat_message::text() const {
  // @@protoc_insertion_point(field_get:ComeTogether.chat_message.text)
  return _internal_text();
}
inline void chat_message::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.text)
}
inline std::string* chat_message::mutable_text() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.chat_message.text)
  return _internal_mutable_text();
}
inline const std::string& chat_message::_internal_text() const {
  if (_internal_has_text()) {
    return content_.text_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void chat_message::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chat_message::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.text)
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.chat_message.text)
}
inline void chat_message::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.chat_message.text)
}
inline void chat_message::set_text(const char* value,
                             size_t size) {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.chat_message.text)
}
inline std::string* chat_message::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return content_.text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chat_message::release_text() {
  // @@protoc_insertion_point(field_release:ComeTogether.chat_message.text)
  if (_internal_has_text()) {
    clear_has_content();
    return content_.text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void chat_message::set_allocated_text(std::string* text) {
  if (has_content()) {
    clear_content();
  }
  if (text != nullptr) {
    set_has_text();
    content_.text_.UnsafeSetDefault(text);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(text);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.chat_message.text)
}

// int64 sent_unix_time = 4;
inline void chat_message::clear_sent_unix_time() {
  sent_unix_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chat_message::_internal_sent_unix_time() const {
  return sent_unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chat_message::sent_unix_time() const {
  // @@protoc_insertion_point(field_get:ComeTogether.chat_message.sent_unix_time)
  return _internal_sent_unix_time();
}
inline void chat_message::_internal_set_sent_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sent_unix_time_ = value;
}
inline void chat_message::set_sent_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sent_unix_time(value);
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.sent_unix_time)
}

// string chat_uuid = 5;
inline void chat_message::clear_chat_uuid() {
  chat_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chat_message::chat_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.chat_message.chat_uuid)
  return _internal_chat_uuid();
}
inline void chat_message::set_chat_uuid(const std::string& value) {
  _internal_set_chat_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.chat_uuid)
}
inline std::string* chat_message::mutable_chat_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.chat_message.chat_uuid)
  return _internal_mutable_chat_uuid();
}
inline const std::string& chat_message::_internal_chat_uuid() const {
  return chat_uuid_.Get();
}
inline void chat_message::_internal_set_chat_uuid(const std::string& value) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chat_message::set_chat_uuid(std::string&& value) {
  
  chat_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.chat_message.chat_uuid)
}
inline void chat_message::set_chat_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.chat_message.chat_uuid)
}
inline void chat_message::set_chat_uuid(const char* value,
    size_t size) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.chat_message.chat_uuid)
}
inline std::string* chat_message::_internal_mutable_chat_uuid() {
  
  return chat_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chat_message::release_chat_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.chat_message.chat_uuid)
  return chat_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chat_message::set_allocated_chat_uuid(std::string* chat_uuid) {
  if (chat_uuid != nullptr) {
    
  } else {
    
  }
  chat_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.chat_message.chat_uuid)
}

// int64 sequence_number = 6;
inline void chat_message::clear_sequence_number() {
  sequence_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chat_message::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chat_message::sequence_number() const {
  // @@protoc_insertion_point(field_get:ComeTogether.chat_message.sequence_number)
  return _internal_sequence_number();
}
inline void chat_message::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_number_ = value;
}
inline void chat_message::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.sequence_number)
}

// string uuid = 7;
inline void chat_message::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chat_message::uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.chat_message.uuid)
  return _internal_uuid();
}
inline void chat_message::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.chat_message.uuid)
}
inline std::string* chat_message::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.chat_message.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& chat_message::_internal_uuid() const {
  return uuid_.Get();
}
inline void chat_message::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chat_message::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.chat_message.uuid)
}
inline void chat_message::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.chat_message.uuid)
}
inline void chat_message::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.chat_message.uuid)
}
inline std::string* chat_message::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chat_message::release_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.chat_message.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chat_message::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.chat_message.uuid)
}

inline bool chat_message::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void chat_message::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline chat_message::ContentCase chat_message::content_case() const {
  return chat_message::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// send_chat_message_request

// string access_token = 1;
inline void send_chat_message_request::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& send_chat_message_request::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.send_chat_message_request.access_token)
  return _internal_access_token();
}
inline void send_chat_message_request::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.send_chat_message_request.access_token)
}
inline std::string* send_chat_message_request::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.send_chat_message_request.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& send_chat_message_request::_internal_access_token() const {
  return access_token_.Get();
}
inline void send_chat_message_request::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void send_chat_message_request::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.send_chat_message_request.access_token)
}
inline void send_chat_message_request::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.send_chat_message_request.access_token)
}
inline void send_chat_message_request::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.send_chat_message_request.access_token)
}
inline std::string* send_chat_message_request::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* send_chat_message_request::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.send_chat_message_request.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void send_chat_message_request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.send_chat_message_request.access_token)
}

// .ComeTogether.chat_message message = 2;
inline bool send_chat_message_request::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool send_chat_message_request::has_message() const {
  return _internal_has_message();
}
inline void send_chat_message_request::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::ComeTogether::chat_message& send_chat_message_request::_internal_message() const {
  const ::ComeTogether::chat_message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ComeTogether::chat_message*>(
      &::ComeTogether::_chat_message_default_instance_);
}
inline const ::ComeTogether::chat_message& send_chat_message_request::message() const {
  // @@protoc_insertion_point(field_get:ComeTogether.send_chat_message_request.message)
  return _internal_message();
}
inline void send_chat_message_request::unsafe_arena_set_allocated_message(
    ::ComeTogether::chat_message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.send_chat_message_request.message)
}
inline ::ComeTogether::chat_message* send_chat_message_request::release_message() {
  
  ::ComeTogether::chat_message* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ComeTogether::chat_message* send_chat_message_request::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:ComeTogether.send_chat_message_request.message)
  
  ::ComeTogether::chat_message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::ComeTogether::chat_message* send_chat_message_request::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::ComeTogether::chat_message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::ComeTogether::chat_message* send_chat_message_request::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.send_chat_message_request.message)
  return _internal_mutable_message();
}
inline void send_chat_message_request::set_allocated_message(::ComeTogether::chat_message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.send_chat_message_request.message)
}

// -------------------------------------------------------------------

// send_chat_message_response

// .ComeTogether.send_chat_message_response.result res = 1;
inline void send_chat_message_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::send_chat_message_response_result send_chat_message_response::_internal_res() const {
  return static_cast< ::ComeTogether::send_chat_message_response_result >(res_);
}
inline ::ComeTogether::send_chat_message_response_result send_chat_message_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.send_chat_message_response.res)
  return _internal_res();
}
inline void send_chat_message_response::_internal_set_res(::ComeTogether::send_chat_message_response_result value) {
  
  res_ = value;
}
inline void send_chat_message_response::set_res(::ComeTogether::send_chat_message_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.send_chat_message_response.res)
}

// int64 actual_sequence_number = 2;
inline void send_chat_message_response::clear_actual_sequence_number() {
  actual_sequence_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 send_chat_message_response::_internal_actual_sequence_number() const {
  return actual_sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 send_chat_message_response::actual_sequence_number() const {
  // @@protoc_insertion_point(field_get:ComeTogether.send_chat_message_response.actual_sequence_number)
  return _internal_actual_sequence_number();
}
inline void send_chat_message_response::_internal_set_actual_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  actual_sequence_number_ = value;
}
inline void send_chat_message_response::set_actual_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_actual_sequence_number(value);
  // @@protoc_insertion_point(field_set:ComeTogether.send_chat_message_response.actual_sequence_number)
}

// -------------------------------------------------------------------

// get_info_request

// .ComeTogether.get_info_request.info_type type = 1;
inline void get_info_request::clear_type() {
  type_ = 0;
}
inline ::ComeTogether::get_info_request_info_type get_info_request::_internal_type() const {
  return static_cast< ::ComeTogether::get_info_request_info_type >(type_);
}
inline ::ComeTogether::get_info_request_info_type get_info_request::type() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_info_request.type)
  return _internal_type();
}
inline void get_info_request::_internal_set_type(::ComeTogether::get_info_request_info_type value) {
  
  type_ = value;
}
inline void get_info_request::set_type(::ComeTogether::get_info_request_info_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_info_request.type)
}

// string access_token = 2;
inline void get_info_request::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_info_request::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_info_request.access_token)
  return _internal_access_token();
}
inline void get_info_request::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_info_request.access_token)
}
inline std::string* get_info_request::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_info_request.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& get_info_request::_internal_access_token() const {
  return access_token_.Get();
}
inline void get_info_request::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_info_request::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_info_request.access_token)
}
inline void get_info_request::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_info_request.access_token)
}
inline void get_info_request::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_info_request.access_token)
}
inline std::string* get_info_request::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_info_request::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_info_request.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_info_request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_info_request.access_token)
}

// string target_uuid = 3;
inline void get_info_request::clear_target_uuid() {
  target_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_info_request::target_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_info_request.target_uuid)
  return _internal_target_uuid();
}
inline void get_info_request::set_target_uuid(const std::string& value) {
  _internal_set_target_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_info_request.target_uuid)
}
inline std::string* get_info_request::mutable_target_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_info_request.target_uuid)
  return _internal_mutable_target_uuid();
}
inline const std::string& get_info_request::_internal_target_uuid() const {
  return target_uuid_.Get();
}
inline void get_info_request::_internal_set_target_uuid(const std::string& value) {
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_info_request::set_target_uuid(std::string&& value) {
  
  target_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_info_request.target_uuid)
}
inline void get_info_request::set_target_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_info_request.target_uuid)
}
inline void get_info_request::set_target_uuid(const char* value,
    size_t size) {
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_info_request.target_uuid)
}
inline std::string* get_info_request::_internal_mutable_target_uuid() {
  
  return target_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_info_request::release_target_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_info_request.target_uuid)
  return target_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_info_request::set_allocated_target_uuid(std::string* target_uuid) {
  if (target_uuid != nullptr) {
    
  } else {
    
  }
  target_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_info_request.target_uuid)
}

// -------------------------------------------------------------------

// get_info_response

// .ComeTogether.user_info u_info = 1;
inline bool get_info_response::_internal_has_u_info() const {
  return data_case() == kUInfo;
}
inline bool get_info_response::has_u_info() const {
  return _internal_has_u_info();
}
inline void get_info_response::set_has_u_info() {
  _oneof_case_[0] = kUInfo;
}
inline void get_info_response::clear_u_info() {
  if (_internal_has_u_info()) {
    if (GetArena() == nullptr) {
      delete data_.u_info_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::user_info* get_info_response::release_u_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_info_response.u_info)
  if (_internal_has_u_info()) {
    clear_has_data();
      ::ComeTogether::user_info* temp = data_.u_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.u_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::user_info& get_info_response::_internal_u_info() const {
  return _internal_has_u_info()
      ? *data_.u_info_
      : *reinterpret_cast< ::ComeTogether::user_info*>(&::ComeTogether::_user_info_default_instance_);
}
inline const ::ComeTogether::user_info& get_info_response::u_info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_info_response.u_info)
  return _internal_u_info();
}
inline ::ComeTogether::user_info* get_info_response::unsafe_arena_release_u_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.get_info_response.u_info)
  if (_internal_has_u_info()) {
    clear_has_data();
    ::ComeTogether::user_info* temp = data_.u_info_;
    data_.u_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void get_info_response::unsafe_arena_set_allocated_u_info(::ComeTogether::user_info* u_info) {
  clear_data();
  if (u_info) {
    set_has_u_info();
    data_.u_info_ = u_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.get_info_response.u_info)
}
inline ::ComeTogether::user_info* get_info_response::_internal_mutable_u_info() {
  if (!_internal_has_u_info()) {
    clear_data();
    set_has_u_info();
    data_.u_info_ = CreateMaybeMessage< ::ComeTogether::user_info >(GetArena());
  }
  return data_.u_info_;
}
inline ::ComeTogether::user_info* get_info_response::mutable_u_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_info_response.u_info)
  return _internal_mutable_u_info();
}

// .ComeTogether.marker_info m_info = 2;
inline bool get_info_response::_internal_has_m_info() const {
  return data_case() == kMInfo;
}
inline bool get_info_response::has_m_info() const {
  return _internal_has_m_info();
}
inline void get_info_response::set_has_m_info() {
  _oneof_case_[0] = kMInfo;
}
inline void get_info_response::clear_m_info() {
  if (_internal_has_m_info()) {
    if (GetArena() == nullptr) {
      delete data_.m_info_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::marker_info* get_info_response::release_m_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_info_response.m_info)
  if (_internal_has_m_info()) {
    clear_has_data();
      ::ComeTogether::marker_info* temp = data_.m_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.m_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::marker_info& get_info_response::_internal_m_info() const {
  return _internal_has_m_info()
      ? *data_.m_info_
      : *reinterpret_cast< ::ComeTogether::marker_info*>(&::ComeTogether::_marker_info_default_instance_);
}
inline const ::ComeTogether::marker_info& get_info_response::m_info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_info_response.m_info)
  return _internal_m_info();
}
inline ::ComeTogether::marker_info* get_info_response::unsafe_arena_release_m_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.get_info_response.m_info)
  if (_internal_has_m_info()) {
    clear_has_data();
    ::ComeTogether::marker_info* temp = data_.m_info_;
    data_.m_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void get_info_response::unsafe_arena_set_allocated_m_info(::ComeTogether::marker_info* m_info) {
  clear_data();
  if (m_info) {
    set_has_m_info();
    data_.m_info_ = m_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.get_info_response.m_info)
}
inline ::ComeTogether::marker_info* get_info_response::_internal_mutable_m_info() {
  if (!_internal_has_m_info()) {
    clear_data();
    set_has_m_info();
    data_.m_info_ = CreateMaybeMessage< ::ComeTogether::marker_info >(GetArena());
  }
  return data_.m_info_;
}
inline ::ComeTogether::marker_info* get_info_response::mutable_m_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_info_response.m_info)
  return _internal_mutable_m_info();
}

// .ComeTogether.marker_chat_info m_c_info = 3;
inline bool get_info_response::_internal_has_m_c_info() const {
  return data_case() == kMCInfo;
}
inline bool get_info_response::has_m_c_info() const {
  return _internal_has_m_c_info();
}
inline void get_info_response::set_has_m_c_info() {
  _oneof_case_[0] = kMCInfo;
}
inline void get_info_response::clear_m_c_info() {
  if (_internal_has_m_c_info()) {
    if (GetArena() == nullptr) {
      delete data_.m_c_info_;
    }
    clear_has_data();
  }
}
inline ::ComeTogether::marker_chat_info* get_info_response::release_m_c_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_info_response.m_c_info)
  if (_internal_has_m_c_info()) {
    clear_has_data();
      ::ComeTogether::marker_chat_info* temp = data_.m_c_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.m_c_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ComeTogether::marker_chat_info& get_info_response::_internal_m_c_info() const {
  return _internal_has_m_c_info()
      ? *data_.m_c_info_
      : *reinterpret_cast< ::ComeTogether::marker_chat_info*>(&::ComeTogether::_marker_chat_info_default_instance_);
}
inline const ::ComeTogether::marker_chat_info& get_info_response::m_c_info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_info_response.m_c_info)
  return _internal_m_c_info();
}
inline ::ComeTogether::marker_chat_info* get_info_response::unsafe_arena_release_m_c_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ComeTogether.get_info_response.m_c_info)
  if (_internal_has_m_c_info()) {
    clear_has_data();
    ::ComeTogether::marker_chat_info* temp = data_.m_c_info_;
    data_.m_c_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void get_info_response::unsafe_arena_set_allocated_m_c_info(::ComeTogether::marker_chat_info* m_c_info) {
  clear_data();
  if (m_c_info) {
    set_has_m_c_info();
    data_.m_c_info_ = m_c_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.get_info_response.m_c_info)
}
inline ::ComeTogether::marker_chat_info* get_info_response::_internal_mutable_m_c_info() {
  if (!_internal_has_m_c_info()) {
    clear_data();
    set_has_m_c_info();
    data_.m_c_info_ = CreateMaybeMessage< ::ComeTogether::marker_chat_info >(GetArena());
  }
  return data_.m_c_info_;
}
inline ::ComeTogether::marker_chat_info* get_info_response::mutable_m_c_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_info_response.m_c_info)
  return _internal_mutable_m_c_info();
}

inline bool get_info_response::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void get_info_response::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline get_info_response::DataCase get_info_response::data_case() const {
  return get_info_response::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// get_images_request

// .ComeTogether.get_images_request.image_type type = 1;
inline void get_images_request::clear_type() {
  type_ = 0;
}
inline ::ComeTogether::get_images_request_image_type get_images_request::_internal_type() const {
  return static_cast< ::ComeTogether::get_images_request_image_type >(type_);
}
inline ::ComeTogether::get_images_request_image_type get_images_request::type() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_images_request.type)
  return _internal_type();
}
inline void get_images_request::_internal_set_type(::ComeTogether::get_images_request_image_type value) {
  
  type_ = value;
}
inline void get_images_request::set_type(::ComeTogether::get_images_request_image_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_images_request.type)
}

// string target_uuid = 2;
inline void get_images_request::clear_target_uuid() {
  target_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_images_request::target_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_images_request.target_uuid)
  return _internal_target_uuid();
}
inline void get_images_request::set_target_uuid(const std::string& value) {
  _internal_set_target_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_images_request.target_uuid)
}
inline std::string* get_images_request::mutable_target_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_images_request.target_uuid)
  return _internal_mutable_target_uuid();
}
inline const std::string& get_images_request::_internal_target_uuid() const {
  return target_uuid_.Get();
}
inline void get_images_request::_internal_set_target_uuid(const std::string& value) {
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_images_request::set_target_uuid(std::string&& value) {
  
  target_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_images_request.target_uuid)
}
inline void get_images_request::set_target_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_images_request.target_uuid)
}
inline void get_images_request::set_target_uuid(const char* value,
    size_t size) {
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_images_request.target_uuid)
}
inline std::string* get_images_request::_internal_mutable_target_uuid() {
  
  return target_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_images_request::release_target_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_images_request.target_uuid)
  return target_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_images_request::set_allocated_target_uuid(std::string* target_uuid) {
  if (target_uuid != nullptr) {
    
  } else {
    
  }
  target_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_images_request.target_uuid)
}

// string access_token = 3;
inline void get_images_request::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_images_request::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_images_request.access_token)
  return _internal_access_token();
}
inline void get_images_request::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_images_request.access_token)
}
inline std::string* get_images_request::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_images_request.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& get_images_request::_internal_access_token() const {
  return access_token_.Get();
}
inline void get_images_request::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_images_request::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_images_request.access_token)
}
inline void get_images_request::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_images_request.access_token)
}
inline void get_images_request::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_images_request.access_token)
}
inline std::string* get_images_request::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_images_request::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_images_request.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_images_request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_images_request.access_token)
}

// int32 amount = 4;
inline void get_images_request::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_images_request::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_images_request::amount() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_images_request.amount)
  return _internal_amount();
}
inline void get_images_request::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void get_images_request::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_images_request.amount)
}

// string hash = 5;
inline void get_images_request::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_images_request::hash() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_images_request.hash)
  return _internal_hash();
}
inline void get_images_request::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_images_request.hash)
}
inline std::string* get_images_request::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.get_images_request.hash)
  return _internal_mutable_hash();
}
inline const std::string& get_images_request::_internal_hash() const {
  return hash_.Get();
}
inline void get_images_request::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_images_request::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.get_images_request.hash)
}
inline void get_images_request::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.get_images_request.hash)
}
inline void get_images_request::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.get_images_request.hash)
}
inline std::string* get_images_request::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_images_request::release_hash() {
  // @@protoc_insertion_point(field_release:ComeTogether.get_images_request.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_images_request::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.get_images_request.hash)
}

// int32 starting_sequence_number = 6;
inline void get_images_request::clear_starting_sequence_number() {
  starting_sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_images_request::_internal_starting_sequence_number() const {
  return starting_sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_images_request::starting_sequence_number() const {
  // @@protoc_insertion_point(field_get:ComeTogether.get_images_request.starting_sequence_number)
  return _internal_starting_sequence_number();
}
inline void get_images_request::_internal_set_starting_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starting_sequence_number_ = value;
}
inline void get_images_request::set_starting_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starting_sequence_number(value);
  // @@protoc_insertion_point(field_set:ComeTogether.get_images_request.starting_sequence_number)
}

// -------------------------------------------------------------------

// manage_image_request

// .ComeTogether.manage_image_request.action act = 1;
inline void manage_image_request::clear_act() {
  act_ = 0;
}
inline ::ComeTogether::manage_image_request_action manage_image_request::_internal_act() const {
  return static_cast< ::ComeTogether::manage_image_request_action >(act_);
}
inline ::ComeTogether::manage_image_request_action manage_image_request::act() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_request.act)
  return _internal_act();
}
inline void manage_image_request::_internal_set_act(::ComeTogether::manage_image_request_action value) {
  
  act_ = value;
}
inline void manage_image_request::set_act(::ComeTogether::manage_image_request_action value) {
  _internal_set_act(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_request.act)
}

// string access_token = 2;
inline void manage_image_request::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& manage_image_request::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_request.access_token)
  return _internal_access_token();
}
inline void manage_image_request::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_request.access_token)
}
inline std::string* manage_image_request::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.manage_image_request.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& manage_image_request::_internal_access_token() const {
  return access_token_.Get();
}
inline void manage_image_request::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void manage_image_request::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.manage_image_request.access_token)
}
inline void manage_image_request::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.manage_image_request.access_token)
}
inline void manage_image_request::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.manage_image_request.access_token)
}
inline std::string* manage_image_request::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* manage_image_request::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.manage_image_request.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void manage_image_request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.manage_image_request.access_token)
}

// string target_uuid = 3;
inline void manage_image_request::clear_target_uuid() {
  target_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& manage_image_request::target_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_request.target_uuid)
  return _internal_target_uuid();
}
inline void manage_image_request::set_target_uuid(const std::string& value) {
  _internal_set_target_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_request.target_uuid)
}
inline std::string* manage_image_request::mutable_target_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.manage_image_request.target_uuid)
  return _internal_mutable_target_uuid();
}
inline const std::string& manage_image_request::_internal_target_uuid() const {
  return target_uuid_.Get();
}
inline void manage_image_request::_internal_set_target_uuid(const std::string& value) {
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void manage_image_request::set_target_uuid(std::string&& value) {
  
  target_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.manage_image_request.target_uuid)
}
inline void manage_image_request::set_target_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.manage_image_request.target_uuid)
}
inline void manage_image_request::set_target_uuid(const char* value,
    size_t size) {
  
  target_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.manage_image_request.target_uuid)
}
inline std::string* manage_image_request::_internal_mutable_target_uuid() {
  
  return target_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* manage_image_request::release_target_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.manage_image_request.target_uuid)
  return target_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void manage_image_request::set_allocated_target_uuid(std::string* target_uuid) {
  if (target_uuid != nullptr) {
    
  } else {
    
  }
  target_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.manage_image_request.target_uuid)
}

// bytes image = 4;
inline bool manage_image_request::_internal_has_image() const {
  return data_case() == kImage;
}
inline void manage_image_request::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void manage_image_request::clear_image() {
  if (_internal_has_image()) {
    data_.image_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& manage_image_request::image() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_request.image)
  return _internal_image();
}
inline void manage_image_request::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_request.image)
}
inline std::string* manage_image_request::mutable_image() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.manage_image_request.image)
  return _internal_mutable_image();
}
inline const std::string& manage_image_request::_internal_image() const {
  if (_internal_has_image()) {
    return data_.image_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void manage_image_request::_internal_set_image(const std::string& value) {
  if (!_internal_has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void manage_image_request::set_image(std::string&& value) {
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_request.image)
  if (!_internal_has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.manage_image_request.image)
}
inline void manage_image_request::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.manage_image_request.image)
}
inline void manage_image_request::set_image(const void* value,
                             size_t size) {
  if (!_internal_has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.manage_image_request.image)
}
inline std::string* manage_image_request::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_data();
    set_has_image();
    data_.image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* manage_image_request::release_image() {
  // @@protoc_insertion_point(field_release:ComeTogether.manage_image_request.image)
  if (_internal_has_image()) {
    clear_has_data();
    return data_.image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void manage_image_request::set_allocated_image(std::string* image) {
  if (has_data()) {
    clear_data();
  }
  if (image != nullptr) {
    set_has_image();
    data_.image_.UnsafeSetDefault(image);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(image);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.manage_image_request.image)
}

// string image_uuid = 5;
inline bool manage_image_request::_internal_has_image_uuid() const {
  return data_case() == kImageUuid;
}
inline void manage_image_request::set_has_image_uuid() {
  _oneof_case_[0] = kImageUuid;
}
inline void manage_image_request::clear_image_uuid() {
  if (_internal_has_image_uuid()) {
    data_.image_uuid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& manage_image_request::image_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_request.image_uuid)
  return _internal_image_uuid();
}
inline void manage_image_request::set_image_uuid(const std::string& value) {
  _internal_set_image_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_request.image_uuid)
}
inline std::string* manage_image_request::mutable_image_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.manage_image_request.image_uuid)
  return _internal_mutable_image_uuid();
}
inline const std::string& manage_image_request::_internal_image_uuid() const {
  if (_internal_has_image_uuid()) {
    return data_.image_uuid_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void manage_image_request::_internal_set_image_uuid(const std::string& value) {
  if (!_internal_has_image_uuid()) {
    clear_data();
    set_has_image_uuid();
    data_.image_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void manage_image_request::set_image_uuid(std::string&& value) {
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_request.image_uuid)
  if (!_internal_has_image_uuid()) {
    clear_data();
    set_has_image_uuid();
    data_.image_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.manage_image_request.image_uuid)
}
inline void manage_image_request::set_image_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_image_uuid()) {
    clear_data();
    set_has_image_uuid();
    data_.image_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.manage_image_request.image_uuid)
}
inline void manage_image_request::set_image_uuid(const char* value,
                             size_t size) {
  if (!_internal_has_image_uuid()) {
    clear_data();
    set_has_image_uuid();
    data_.image_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.image_uuid_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.manage_image_request.image_uuid)
}
inline std::string* manage_image_request::_internal_mutable_image_uuid() {
  if (!_internal_has_image_uuid()) {
    clear_data();
    set_has_image_uuid();
    data_.image_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.image_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* manage_image_request::release_image_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.manage_image_request.image_uuid)
  if (_internal_has_image_uuid()) {
    clear_has_data();
    return data_.image_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void manage_image_request::set_allocated_image_uuid(std::string* image_uuid) {
  if (has_data()) {
    clear_data();
  }
  if (image_uuid != nullptr) {
    set_has_image_uuid();
    data_.image_uuid_.UnsafeSetDefault(image_uuid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(image_uuid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.manage_image_request.image_uuid)
}

inline bool manage_image_request::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void manage_image_request::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline manage_image_request::DataCase manage_image_request::data_case() const {
  return manage_image_request::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// manage_image_response

// .ComeTogether.manage_image_response.result res = 1;
inline void manage_image_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::manage_image_response_result manage_image_response::_internal_res() const {
  return static_cast< ::ComeTogether::manage_image_response_result >(res_);
}
inline ::ComeTogether::manage_image_response_result manage_image_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_response.res)
  return _internal_res();
}
inline void manage_image_response::_internal_set_res(::ComeTogether::manage_image_response_result value) {
  
  res_ = value;
}
inline void manage_image_response::set_res(::ComeTogether::manage_image_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_response.res)
}

// string image_uuid = 2;
inline void manage_image_response::clear_image_uuid() {
  image_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& manage_image_response::image_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_response.image_uuid)
  return _internal_image_uuid();
}
inline void manage_image_response::set_image_uuid(const std::string& value) {
  _internal_set_image_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_response.image_uuid)
}
inline std::string* manage_image_response::mutable_image_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.manage_image_response.image_uuid)
  return _internal_mutable_image_uuid();
}
inline const std::string& manage_image_response::_internal_image_uuid() const {
  return image_uuid_.Get();
}
inline void manage_image_response::_internal_set_image_uuid(const std::string& value) {
  
  image_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void manage_image_response::set_image_uuid(std::string&& value) {
  
  image_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.manage_image_response.image_uuid)
}
inline void manage_image_response::set_image_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.manage_image_response.image_uuid)
}
inline void manage_image_response::set_image_uuid(const char* value,
    size_t size) {
  
  image_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.manage_image_response.image_uuid)
}
inline std::string* manage_image_response::_internal_mutable_image_uuid() {
  
  return image_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* manage_image_response::release_image_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.manage_image_response.image_uuid)
  return image_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void manage_image_response::set_allocated_image_uuid(std::string* image_uuid) {
  if (image_uuid != nullptr) {
    
  } else {
    
  }
  image_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.manage_image_response.image_uuid)
}

// int32 image_sequence_number = 3;
inline void manage_image_response::clear_image_sequence_number() {
  image_sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 manage_image_response::_internal_image_sequence_number() const {
  return image_sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 manage_image_response::image_sequence_number() const {
  // @@protoc_insertion_point(field_get:ComeTogether.manage_image_response.image_sequence_number)
  return _internal_image_sequence_number();
}
inline void manage_image_response::_internal_set_image_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_sequence_number_ = value;
}
inline void manage_image_response::set_image_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_sequence_number(value);
  // @@protoc_insertion_point(field_set:ComeTogether.manage_image_response.image_sequence_number)
}

// -------------------------------------------------------------------

// check_request

// string data = 1;
inline void check_request::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& check_request::data() const {
  // @@protoc_insertion_point(field_get:ComeTogether.check_request.data)
  return _internal_data();
}
inline void check_request::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ComeTogether.check_request.data)
}
inline std::string* check_request::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.check_request.data)
  return _internal_mutable_data();
}
inline const std::string& check_request::_internal_data() const {
  return data_.Get();
}
inline void check_request::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void check_request::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.check_request.data)
}
inline void check_request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.check_request.data)
}
inline void check_request::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.check_request.data)
}
inline std::string* check_request::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* check_request::release_data() {
  // @@protoc_insertion_point(field_release:ComeTogether.check_request.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void check_request::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.check_request.data)
}

// -------------------------------------------------------------------

// check_response

// .ComeTogether.check_response.result res = 1;
inline void check_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::check_response_result check_response::_internal_res() const {
  return static_cast< ::ComeTogether::check_response_result >(res_);
}
inline ::ComeTogether::check_response_result check_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.check_response.res)
  return _internal_res();
}
inline void check_response::_internal_set_res(::ComeTogether::check_response_result value) {
  
  res_ = value;
}
inline void check_response::set_res(::ComeTogether::check_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.check_response.res)
}

// -------------------------------------------------------------------

// login_request

// string login = 1;
inline void login_request::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& login_request::login() const {
  // @@protoc_insertion_point(field_get:ComeTogether.login_request.login)
  return _internal_login();
}
inline void login_request::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:ComeTogether.login_request.login)
}
inline std::string* login_request::mutable_login() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.login_request.login)
  return _internal_mutable_login();
}
inline const std::string& login_request::_internal_login() const {
  return login_.Get();
}
inline void login_request::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void login_request::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.login_request.login)
}
inline void login_request::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.login_request.login)
}
inline void login_request::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.login_request.login)
}
inline std::string* login_request::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* login_request::release_login() {
  // @@protoc_insertion_point(field_release:ComeTogether.login_request.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_request::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.login_request.login)
}

// string password = 2;
inline void login_request::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& login_request::password() const {
  // @@protoc_insertion_point(field_get:ComeTogether.login_request.password)
  return _internal_password();
}
inline void login_request::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ComeTogether.login_request.password)
}
inline std::string* login_request::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.login_request.password)
  return _internal_mutable_password();
}
inline const std::string& login_request::_internal_password() const {
  return password_.Get();
}
inline void login_request::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void login_request::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.login_request.password)
}
inline void login_request::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.login_request.password)
}
inline void login_request::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.login_request.password)
}
inline std::string* login_request::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* login_request::release_password() {
  // @@protoc_insertion_point(field_release:ComeTogether.login_request.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.login_request.password)
}

// -------------------------------------------------------------------

// login_response

// .ComeTogether.login_response.result res = 1;
inline void login_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::login_response_result login_response::_internal_res() const {
  return static_cast< ::ComeTogether::login_response_result >(res_);
}
inline ::ComeTogether::login_response_result login_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.login_response.res)
  return _internal_res();
}
inline void login_response::_internal_set_res(::ComeTogether::login_response_result value) {
  
  res_ = value;
}
inline void login_response::set_res(::ComeTogether::login_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.login_response.res)
}

// .ComeTogether.user_info info = 2;
inline bool login_response::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool login_response::has_info() const {
  return _internal_has_info();
}
inline void login_response::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::ComeTogether::user_info& login_response::_internal_info() const {
  const ::ComeTogether::user_info* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ComeTogether::user_info*>(
      &::ComeTogether::_user_info_default_instance_);
}
inline const ::ComeTogether::user_info& login_response::info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.login_response.info)
  return _internal_info();
}
inline void login_response::unsafe_arena_set_allocated_info(
    ::ComeTogether::user_info* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.login_response.info)
}
inline ::ComeTogether::user_info* login_response::release_info() {
  
  ::ComeTogether::user_info* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ComeTogether::user_info* login_response::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.login_response.info)
  
  ::ComeTogether::user_info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::ComeTogether::user_info* login_response::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ComeTogether::user_info>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::ComeTogether::user_info* login_response::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.login_response.info)
  return _internal_mutable_info();
}
inline void login_response::set_allocated_info(::ComeTogether::user_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.login_response.info)
}

// string access_token = 3;
inline void login_response::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& login_response::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.login_response.access_token)
  return _internal_access_token();
}
inline void login_response::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.login_response.access_token)
}
inline std::string* login_response::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.login_response.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& login_response::_internal_access_token() const {
  return access_token_.Get();
}
inline void login_response::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void login_response::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.login_response.access_token)
}
inline void login_response::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.login_response.access_token)
}
inline void login_response::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.login_response.access_token)
}
inline std::string* login_response::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* login_response::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.login_response.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_response::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.login_response.access_token)
}

// -------------------------------------------------------------------

// register_request

// .ComeTogether.user_info info = 1;
inline bool register_request::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool register_request::has_info() const {
  return _internal_has_info();
}
inline void register_request::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::ComeTogether::user_info& register_request::_internal_info() const {
  const ::ComeTogether::user_info* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ComeTogether::user_info*>(
      &::ComeTogether::_user_info_default_instance_);
}
inline const ::ComeTogether::user_info& register_request::info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.register_request.info)
  return _internal_info();
}
inline void register_request::unsafe_arena_set_allocated_info(
    ::ComeTogether::user_info* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.register_request.info)
}
inline ::ComeTogether::user_info* register_request::release_info() {
  
  ::ComeTogether::user_info* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ComeTogether::user_info* register_request::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.register_request.info)
  
  ::ComeTogether::user_info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::ComeTogether::user_info* register_request::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ComeTogether::user_info>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::ComeTogether::user_info* register_request::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.register_request.info)
  return _internal_mutable_info();
}
inline void register_request::set_allocated_info(::ComeTogether::user_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.register_request.info)
}

// -------------------------------------------------------------------

// register_response

// .ComeTogether.register_response.result res = 1;
inline void register_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::register_response_result register_response::_internal_res() const {
  return static_cast< ::ComeTogether::register_response_result >(res_);
}
inline ::ComeTogether::register_response_result register_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.register_response.res)
  return _internal_res();
}
inline void register_response::_internal_set_res(::ComeTogether::register_response_result value) {
  
  res_ = value;
}
inline void register_response::set_res(::ComeTogether::register_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.register_response.res)
}

// string user_uuid = 2;
inline void register_response::clear_user_uuid() {
  user_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& register_response::user_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.register_response.user_uuid)
  return _internal_user_uuid();
}
inline void register_response::set_user_uuid(const std::string& value) {
  _internal_set_user_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.register_response.user_uuid)
}
inline std::string* register_response::mutable_user_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.register_response.user_uuid)
  return _internal_mutable_user_uuid();
}
inline const std::string& register_response::_internal_user_uuid() const {
  return user_uuid_.Get();
}
inline void register_response::_internal_set_user_uuid(const std::string& value) {
  
  user_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void register_response::set_user_uuid(std::string&& value) {
  
  user_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.register_response.user_uuid)
}
inline void register_response::set_user_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.register_response.user_uuid)
}
inline void register_response::set_user_uuid(const char* value,
    size_t size) {
  
  user_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.register_response.user_uuid)
}
inline std::string* register_response::_internal_mutable_user_uuid() {
  
  return user_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* register_response::release_user_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.register_response.user_uuid)
  return user_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void register_response::set_allocated_user_uuid(std::string* user_uuid) {
  if (user_uuid != nullptr) {
    
  } else {
    
  }
  user_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.register_response.user_uuid)
}

// string access_token = 3;
inline void register_response::clear_access_token() {
  access_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& register_response::access_token() const {
  // @@protoc_insertion_point(field_get:ComeTogether.register_response.access_token)
  return _internal_access_token();
}
inline void register_response::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:ComeTogether.register_response.access_token)
}
inline std::string* register_response::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.register_response.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& register_response::_internal_access_token() const {
  return access_token_.Get();
}
inline void register_response::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void register_response::set_access_token(std::string&& value) {
  
  access_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.register_response.access_token)
}
inline void register_response::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.register_response.access_token)
}
inline void register_response::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.register_response.access_token)
}
inline std::string* register_response::_internal_mutable_access_token() {
  
  return access_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* register_response::release_access_token() {
  // @@protoc_insertion_point(field_release:ComeTogether.register_response.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void register_response::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.register_response.access_token)
}

// -------------------------------------------------------------------

// user_info

// string email = 1;
inline void user_info::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info::email() const {
  // @@protoc_insertion_point(field_get:ComeTogether.user_info.email)
  return _internal_email();
}
inline void user_info::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ComeTogether.user_info.email)
}
inline std::string* user_info::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.user_info.email)
  return _internal_mutable_email();
}
inline const std::string& user_info::_internal_email() const {
  return email_.Get();
}
inline void user_info::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.user_info.email)
}
inline void user_info::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.user_info.email)
}
inline void user_info::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.user_info.email)
}
inline std::string* user_info::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info::release_email() {
  // @@protoc_insertion_point(field_release:ComeTogether.user_info.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.user_info.email)
}

// string password = 2;
inline void user_info::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info::password() const {
  // @@protoc_insertion_point(field_get:ComeTogether.user_info.password)
  return _internal_password();
}
inline void user_info::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ComeTogether.user_info.password)
}
inline std::string* user_info::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.user_info.password)
  return _internal_mutable_password();
}
inline const std::string& user_info::_internal_password() const {
  return password_.Get();
}
inline void user_info::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.user_info.password)
}
inline void user_info::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.user_info.password)
}
inline void user_info::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.user_info.password)
}
inline std::string* user_info::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info::release_password() {
  // @@protoc_insertion_point(field_release:ComeTogether.user_info.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.user_info.password)
}

// string first_name = 3;
inline void user_info::clear_first_name() {
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info::first_name() const {
  // @@protoc_insertion_point(field_get:ComeTogether.user_info.first_name)
  return _internal_first_name();
}
inline void user_info::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:ComeTogether.user_info.first_name)
}
inline std::string* user_info::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.user_info.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& user_info::_internal_first_name() const {
  return first_name_.Get();
}
inline void user_info::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info::set_first_name(std::string&& value) {
  
  first_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.user_info.first_name)
}
inline void user_info::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.user_info.first_name)
}
inline void user_info::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.user_info.first_name)
}
inline std::string* user_info::_internal_mutable_first_name() {
  
  return first_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info::release_first_name() {
  // @@protoc_insertion_point(field_release:ComeTogether.user_info.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.user_info.first_name)
}

// string last_naem = 4;
inline void user_info::clear_last_naem() {
  last_naem_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info::last_naem() const {
  // @@protoc_insertion_point(field_get:ComeTogether.user_info.last_naem)
  return _internal_last_naem();
}
inline void user_info::set_last_naem(const std::string& value) {
  _internal_set_last_naem(value);
  // @@protoc_insertion_point(field_set:ComeTogether.user_info.last_naem)
}
inline std::string* user_info::mutable_last_naem() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.user_info.last_naem)
  return _internal_mutable_last_naem();
}
inline const std::string& user_info::_internal_last_naem() const {
  return last_naem_.Get();
}
inline void user_info::_internal_set_last_naem(const std::string& value) {
  
  last_naem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info::set_last_naem(std::string&& value) {
  
  last_naem_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.user_info.last_naem)
}
inline void user_info::set_last_naem(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_naem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.user_info.last_naem)
}
inline void user_info::set_last_naem(const char* value,
    size_t size) {
  
  last_naem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.user_info.last_naem)
}
inline std::string* user_info::_internal_mutable_last_naem() {
  
  return last_naem_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info::release_last_naem() {
  // @@protoc_insertion_point(field_release:ComeTogether.user_info.last_naem)
  return last_naem_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info::set_allocated_last_naem(std::string* last_naem) {
  if (last_naem != nullptr) {
    
  } else {
    
  }
  last_naem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_naem,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.user_info.last_naem)
}

// string bio = 5;
inline void user_info::clear_bio() {
  bio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info::bio() const {
  // @@protoc_insertion_point(field_get:ComeTogether.user_info.bio)
  return _internal_bio();
}
inline void user_info::set_bio(const std::string& value) {
  _internal_set_bio(value);
  // @@protoc_insertion_point(field_set:ComeTogether.user_info.bio)
}
inline std::string* user_info::mutable_bio() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.user_info.bio)
  return _internal_mutable_bio();
}
inline const std::string& user_info::_internal_bio() const {
  return bio_.Get();
}
inline void user_info::_internal_set_bio(const std::string& value) {
  
  bio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info::set_bio(std::string&& value) {
  
  bio_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.user_info.bio)
}
inline void user_info::set_bio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.user_info.bio)
}
inline void user_info::set_bio(const char* value,
    size_t size) {
  
  bio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.user_info.bio)
}
inline std::string* user_info::_internal_mutable_bio() {
  
  return bio_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info::release_bio() {
  // @@protoc_insertion_point(field_release:ComeTogether.user_info.bio)
  return bio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info::set_allocated_bio(std::string* bio) {
  if (bio != nullptr) {
    
  } else {
    
  }
  bio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.user_info.bio)
}

// string uuid = 6;
inline void user_info::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info::uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.user_info.uuid)
  return _internal_uuid();
}
inline void user_info::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.user_info.uuid)
}
inline std::string* user_info::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.user_info.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& user_info::_internal_uuid() const {
  return uuid_.Get();
}
inline void user_info::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.user_info.uuid)
}
inline void user_info::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.user_info.uuid)
}
inline void user_info::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.user_info.uuid)
}
inline std::string* user_info::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info::release_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.user_info.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.user_info.uuid)
}

// int32 images_amount = 7;
inline void user_info::clear_images_amount() {
  images_amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info::_internal_images_amount() const {
  return images_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info::images_amount() const {
  // @@protoc_insertion_point(field_get:ComeTogether.user_info.images_amount)
  return _internal_images_amount();
}
inline void user_info::_internal_set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  images_amount_ = value;
}
inline void user_info::set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_images_amount(value);
  // @@protoc_insertion_point(field_set:ComeTogether.user_info.images_amount)
}

// -------------------------------------------------------------------

// marker_info

// .ComeTogether.marker_info.category cat = 1;
inline void marker_info::clear_cat() {
  cat_ = 0;
}
inline ::ComeTogether::marker_info_category marker_info::_internal_cat() const {
  return static_cast< ::ComeTogether::marker_info_category >(cat_);
}
inline ::ComeTogether::marker_info_category marker_info::cat() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.cat)
  return _internal_cat();
}
inline void marker_info::_internal_set_cat(::ComeTogether::marker_info_category value) {
  
  cat_ = value;
}
inline void marker_info::set_cat(::ComeTogether::marker_info_category value) {
  _internal_set_cat(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.cat)
}

// int64 from_unix_time = 2;
inline void marker_info::clear_from_unix_time() {
  from_unix_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 marker_info::_internal_from_unix_time() const {
  return from_unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 marker_info::from_unix_time() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.from_unix_time)
  return _internal_from_unix_time();
}
inline void marker_info::_internal_set_from_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_unix_time_ = value;
}
inline void marker_info::set_from_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_unix_time(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.from_unix_time)
}

// int64 to_unix_time = 3;
inline void marker_info::clear_to_unix_time() {
  to_unix_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 marker_info::_internal_to_unix_time() const {
  return to_unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 marker_info::to_unix_time() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.to_unix_time)
  return _internal_to_unix_time();
}
inline void marker_info::_internal_set_to_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_unix_time_ = value;
}
inline void marker_info::set_to_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_unix_time(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.to_unix_time)
}

// int64 creation_unix_time = 4;
inline void marker_info::clear_creation_unix_time() {
  creation_unix_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 marker_info::_internal_creation_unix_time() const {
  return creation_unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 marker_info::creation_unix_time() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.creation_unix_time)
  return _internal_creation_unix_time();
}
inline void marker_info::_internal_set_creation_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_unix_time_ = value;
}
inline void marker_info::set_creation_unix_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_unix_time(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.creation_unix_time)
}

// string creator_uuid = 5;
inline void marker_info::clear_creator_uuid() {
  creator_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& marker_info::creator_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.creator_uuid)
  return _internal_creator_uuid();
}
inline void marker_info::set_creator_uuid(const std::string& value) {
  _internal_set_creator_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.creator_uuid)
}
inline std::string* marker_info::mutable_creator_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.marker_info.creator_uuid)
  return _internal_mutable_creator_uuid();
}
inline const std::string& marker_info::_internal_creator_uuid() const {
  return creator_uuid_.Get();
}
inline void marker_info::_internal_set_creator_uuid(const std::string& value) {
  
  creator_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void marker_info::set_creator_uuid(std::string&& value) {
  
  creator_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.marker_info.creator_uuid)
}
inline void marker_info::set_creator_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creator_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.marker_info.creator_uuid)
}
inline void marker_info::set_creator_uuid(const char* value,
    size_t size) {
  
  creator_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.marker_info.creator_uuid)
}
inline std::string* marker_info::_internal_mutable_creator_uuid() {
  
  return creator_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* marker_info::release_creator_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.marker_info.creator_uuid)
  return creator_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void marker_info::set_allocated_creator_uuid(std::string* creator_uuid) {
  if (creator_uuid != nullptr) {
    
  } else {
    
  }
  creator_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.marker_info.creator_uuid)
}

// string name = 6;
inline void marker_info::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& marker_info::name() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.name)
  return _internal_name();
}
inline void marker_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.name)
}
inline std::string* marker_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.marker_info.name)
  return _internal_mutable_name();
}
inline const std::string& marker_info::_internal_name() const {
  return name_.Get();
}
inline void marker_info::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void marker_info::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.marker_info.name)
}
inline void marker_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.marker_info.name)
}
inline void marker_info::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.marker_info.name)
}
inline std::string* marker_info::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* marker_info::release_name() {
  // @@protoc_insertion_point(field_release:ComeTogether.marker_info.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void marker_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.marker_info.name)
}

// int32 expected_people_amount = 7;
inline void marker_info::clear_expected_people_amount() {
  expected_people_amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 marker_info::_internal_expected_people_amount() const {
  return expected_people_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 marker_info::expected_people_amount() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.expected_people_amount)
  return _internal_expected_people_amount();
}
inline void marker_info::_internal_set_expected_people_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_people_amount_ = value;
}
inline void marker_info::set_expected_people_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_people_amount(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.expected_people_amount)
}

// string expected_expenses = 8;
inline void marker_info::clear_expected_expenses() {
  expected_expenses_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& marker_info::expected_expenses() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.expected_expenses)
  return _internal_expected_expenses();
}
inline void marker_info::set_expected_expenses(const std::string& value) {
  _internal_set_expected_expenses(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.expected_expenses)
}
inline std::string* marker_info::mutable_expected_expenses() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.marker_info.expected_expenses)
  return _internal_mutable_expected_expenses();
}
inline const std::string& marker_info::_internal_expected_expenses() const {
  return expected_expenses_.Get();
}
inline void marker_info::_internal_set_expected_expenses(const std::string& value) {
  
  expected_expenses_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void marker_info::set_expected_expenses(std::string&& value) {
  
  expected_expenses_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.marker_info.expected_expenses)
}
inline void marker_info::set_expected_expenses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expected_expenses_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.marker_info.expected_expenses)
}
inline void marker_info::set_expected_expenses(const char* value,
    size_t size) {
  
  expected_expenses_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.marker_info.expected_expenses)
}
inline std::string* marker_info::_internal_mutable_expected_expenses() {
  
  return expected_expenses_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* marker_info::release_expected_expenses() {
  // @@protoc_insertion_point(field_release:ComeTogether.marker_info.expected_expenses)
  return expected_expenses_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void marker_info::set_allocated_expected_expenses(std::string* expected_expenses) {
  if (expected_expenses != nullptr) {
    
  } else {
    
  }
  expected_expenses_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expected_expenses,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.marker_info.expected_expenses)
}

// double latitude = 9;
inline void marker_info::clear_latitude() {
  latitude_ = 0;
}
inline double marker_info::_internal_latitude() const {
  return latitude_;
}
inline double marker_info::latitude() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.latitude)
  return _internal_latitude();
}
inline void marker_info::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void marker_info::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.latitude)
}

// double longitude = 10;
inline void marker_info::clear_longitude() {
  longitude_ = 0;
}
inline double marker_info::_internal_longitude() const {
  return longitude_;
}
inline double marker_info::longitude() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.longitude)
  return _internal_longitude();
}
inline void marker_info::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void marker_info::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.longitude)
}

// string uuid = 11;
inline void marker_info::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& marker_info::uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.uuid)
  return _internal_uuid();
}
inline void marker_info::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.uuid)
}
inline std::string* marker_info::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.marker_info.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& marker_info::_internal_uuid() const {
  return uuid_.Get();
}
inline void marker_info::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void marker_info::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.marker_info.uuid)
}
inline void marker_info::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.marker_info.uuid)
}
inline void marker_info::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.marker_info.uuid)
}
inline std::string* marker_info::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* marker_info::release_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.marker_info.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void marker_info::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.marker_info.uuid)
}

// string chat_uuid = 12;
inline void marker_info::clear_chat_uuid() {
  chat_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& marker_info::chat_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.chat_uuid)
  return _internal_chat_uuid();
}
inline void marker_info::set_chat_uuid(const std::string& value) {
  _internal_set_chat_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.chat_uuid)
}
inline std::string* marker_info::mutable_chat_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.marker_info.chat_uuid)
  return _internal_mutable_chat_uuid();
}
inline const std::string& marker_info::_internal_chat_uuid() const {
  return chat_uuid_.Get();
}
inline void marker_info::_internal_set_chat_uuid(const std::string& value) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void marker_info::set_chat_uuid(std::string&& value) {
  
  chat_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.marker_info.chat_uuid)
}
inline void marker_info::set_chat_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.marker_info.chat_uuid)
}
inline void marker_info::set_chat_uuid(const char* value,
    size_t size) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.marker_info.chat_uuid)
}
inline std::string* marker_info::_internal_mutable_chat_uuid() {
  
  return chat_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* marker_info::release_chat_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.marker_info.chat_uuid)
  return chat_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void marker_info::set_allocated_chat_uuid(std::string* chat_uuid) {
  if (chat_uuid != nullptr) {
    
  } else {
    
  }
  chat_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.marker_info.chat_uuid)
}

// int32 images_amount = 13;
inline void marker_info::clear_images_amount() {
  images_amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 marker_info::_internal_images_amount() const {
  return images_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 marker_info::images_amount() const {
  // @@protoc_insertion_point(field_get:ComeTogether.marker_info.images_amount)
  return _internal_images_amount();
}
inline void marker_info::_internal_set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  images_amount_ = value;
}
inline void marker_info::set_images_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_images_amount(value);
  // @@protoc_insertion_point(field_set:ComeTogether.marker_info.images_amount)
}

// -------------------------------------------------------------------

// add_marker_request

// .ComeTogether.marker_info info = 1;
inline bool add_marker_request::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool add_marker_request::has_info() const {
  return _internal_has_info();
}
inline void add_marker_request::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::ComeTogether::marker_info& add_marker_request::_internal_info() const {
  const ::ComeTogether::marker_info* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ComeTogether::marker_info*>(
      &::ComeTogether::_marker_info_default_instance_);
}
inline const ::ComeTogether::marker_info& add_marker_request::info() const {
  // @@protoc_insertion_point(field_get:ComeTogether.add_marker_request.info)
  return _internal_info();
}
inline void add_marker_request::unsafe_arena_set_allocated_info(
    ::ComeTogether::marker_info* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComeTogether.add_marker_request.info)
}
inline ::ComeTogether::marker_info* add_marker_request::release_info() {
  
  ::ComeTogether::marker_info* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ComeTogether::marker_info* add_marker_request::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ComeTogether.add_marker_request.info)
  
  ::ComeTogether::marker_info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::ComeTogether::marker_info* add_marker_request::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ComeTogether::marker_info>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::ComeTogether::marker_info* add_marker_request::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.add_marker_request.info)
  return _internal_mutable_info();
}
inline void add_marker_request::set_allocated_info(::ComeTogether::marker_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.add_marker_request.info)
}

// -------------------------------------------------------------------

// add_marker_response

// .ComeTogether.add_marker_response.result res = 1;
inline void add_marker_response::clear_res() {
  res_ = 0;
}
inline ::ComeTogether::add_marker_response_result add_marker_response::_internal_res() const {
  return static_cast< ::ComeTogether::add_marker_response_result >(res_);
}
inline ::ComeTogether::add_marker_response_result add_marker_response::res() const {
  // @@protoc_insertion_point(field_get:ComeTogether.add_marker_response.res)
  return _internal_res();
}
inline void add_marker_response::_internal_set_res(::ComeTogether::add_marker_response_result value) {
  
  res_ = value;
}
inline void add_marker_response::set_res(::ComeTogether::add_marker_response_result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:ComeTogether.add_marker_response.res)
}

// string uuid = 2;
inline void add_marker_response::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& add_marker_response::uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.add_marker_response.uuid)
  return _internal_uuid();
}
inline void add_marker_response::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.add_marker_response.uuid)
}
inline std::string* add_marker_response::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.add_marker_response.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& add_marker_response::_internal_uuid() const {
  return uuid_.Get();
}
inline void add_marker_response::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void add_marker_response::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.add_marker_response.uuid)
}
inline void add_marker_response::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.add_marker_response.uuid)
}
inline void add_marker_response::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.add_marker_response.uuid)
}
inline std::string* add_marker_response::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* add_marker_response::release_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.add_marker_response.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void add_marker_response::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.add_marker_response.uuid)
}

// string chat_uuid = 3;
inline void add_marker_response::clear_chat_uuid() {
  chat_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& add_marker_response::chat_uuid() const {
  // @@protoc_insertion_point(field_get:ComeTogether.add_marker_response.chat_uuid)
  return _internal_chat_uuid();
}
inline void add_marker_response::set_chat_uuid(const std::string& value) {
  _internal_set_chat_uuid(value);
  // @@protoc_insertion_point(field_set:ComeTogether.add_marker_response.chat_uuid)
}
inline std::string* add_marker_response::mutable_chat_uuid() {
  // @@protoc_insertion_point(field_mutable:ComeTogether.add_marker_response.chat_uuid)
  return _internal_mutable_chat_uuid();
}
inline const std::string& add_marker_response::_internal_chat_uuid() const {
  return chat_uuid_.Get();
}
inline void add_marker_response::_internal_set_chat_uuid(const std::string& value) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void add_marker_response::set_chat_uuid(std::string&& value) {
  
  chat_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ComeTogether.add_marker_response.chat_uuid)
}
inline void add_marker_response::set_chat_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ComeTogether.add_marker_response.chat_uuid)
}
inline void add_marker_response::set_chat_uuid(const char* value,
    size_t size) {
  
  chat_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ComeTogether.add_marker_response.chat_uuid)
}
inline std::string* add_marker_response::_internal_mutable_chat_uuid() {
  
  return chat_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* add_marker_response::release_chat_uuid() {
  // @@protoc_insertion_point(field_release:ComeTogether.add_marker_response.chat_uuid)
  return chat_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void add_marker_response::set_allocated_chat_uuid(std::string* chat_uuid) {
  if (chat_uuid != nullptr) {
    
  } else {
    
  }
  chat_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ComeTogether.add_marker_response.chat_uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ComeTogether

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ComeTogether::verify_token_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::verify_token_response_result>() {
  return ::ComeTogether::verify_token_response_result_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::update_info_request_update_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::update_info_request_update_type>() {
  return ::ComeTogether::update_info_request_update_type_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::update_info_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::update_info_response_result>() {
  return ::ComeTogether::update_info_response_result_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::event_event_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::event_event_type>() {
  return ::ComeTogether::event_event_type_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::chat_message_message_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::chat_message_message_type>() {
  return ::ComeTogether::chat_message_message_type_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::send_chat_message_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::send_chat_message_response_result>() {
  return ::ComeTogether::send_chat_message_response_result_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::get_info_request_info_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::get_info_request_info_type>() {
  return ::ComeTogether::get_info_request_info_type_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::get_images_request_image_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::get_images_request_image_type>() {
  return ::ComeTogether::get_images_request_image_type_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::manage_image_request_action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::manage_image_request_action>() {
  return ::ComeTogether::manage_image_request_action_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::manage_image_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::manage_image_response_result>() {
  return ::ComeTogether::manage_image_response_result_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::check_request_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::check_request_type>() {
  return ::ComeTogether::check_request_type_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::check_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::check_response_result>() {
  return ::ComeTogether::check_response_result_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::login_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::login_response_result>() {
  return ::ComeTogether::login_response_result_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::register_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::register_response_result>() {
  return ::ComeTogether::register_response_result_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::marker_info_category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::marker_info_category>() {
  return ::ComeTogether::marker_info_category_descriptor();
}
template <> struct is_proto_enum< ::ComeTogether::add_marker_response_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComeTogether::add_marker_response_result>() {
  return ::ComeTogether::add_marker_response_result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_come_5ftogether_2eproto
